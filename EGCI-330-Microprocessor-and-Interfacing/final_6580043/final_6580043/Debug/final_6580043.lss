
final_6580043.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000544  000005d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000544  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800140  00800140  00000618  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fca  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000852  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082e  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  0000277c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d4  00000000  00000000  00002910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f4  00000000  00000000  00002de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000034d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e4       	ldi	r26, 0x40	; 64
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 34       	cpi	r26, 0x42	; 66
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 92 02 	call	0x524	; 0x524 <main>
  9e:	0c 94 a0 02 	jmp	0x540	; 0x540 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <keypad_init>:

uint8_t read_key;

void keypad_init()
{
	KEY_DDR |= 0xF0;//pin0-3 INPUT pin4-7 OUTPUT
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 6f       	ori	r24, 0xF0	; 240
  aa:	8a b9       	out	0x0a, r24	; 10
	KEY_PORT |= 0x0F; // Enable pull-up resistors for pins 0-3
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	8f 60       	ori	r24, 0x0F	; 15
  b0:	8b b9       	out	0x0b, r24	; 11
  b2:	08 95       	ret

000000b4 <get_key>:
}

char get_key()
{
	char c = 'x';
	KEY_PORT  = 0b01111111; // ground row0
  b4:	8f e7       	ldi	r24, 0x7F	; 127
  b6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	85 e3       	ldi	r24, 0x35	; 53
  ba:	8a 95       	dec	r24
  bc:	f1 f7       	brne	.-4      	; 0xba <get_key+0x6>
  be:	00 00       	nop
	_delay_us(10);
	read_key = KEY_PIN & (0x0F);
  c0:	89 b1       	in	r24, 0x09	; 9
  c2:	8f 70       	andi	r24, 0x0F	; 15
  c4:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <read_key>
	if(read_key != 0x0F)
  c8:	8f 30       	cpi	r24, 0x0F	; 15
  ca:	59 f0       	breq	.+22     	; 0xe2 <get_key+0x2e>
	{
		if (!(read_key & (1<<0))) c = '1';
  cc:	80 ff       	sbrs	r24, 0
  ce:	4b c0       	rjmp	.+150    	; 0x166 <get_key+0xb2>
		else if (!(read_key & (1 << 1))) c = '2';
  d0:	81 ff       	sbrs	r24, 1
  d2:	4b c0       	rjmp	.+150    	; 0x16a <get_key+0xb6>
		else if (!(read_key & (1 << 2))) c = '3';
  d4:	82 ff       	sbrs	r24, 2
  d6:	4b c0       	rjmp	.+150    	; 0x16e <get_key+0xba>
		else if (!(read_key & (1 << 3))) c = 'A';
  d8:	88 70       	andi	r24, 0x08	; 8
  da:	09 f4       	brne	.+2      	; 0xde <get_key+0x2a>
  dc:	4a c0       	rjmp	.+148    	; 0x172 <get_key+0xbe>
	return press;
}

char get_key()
{
	char c = 'x';
  de:	88 e7       	ldi	r24, 0x78	; 120
  e0:	08 95       	ret
		else if (!(read_key & (1 << 1))) c = '2';
		else if (!(read_key & (1 << 2))) c = '3';
		else if (!(read_key & (1 << 3))) c = 'A';
		return c;
	}
	KEY_PORT  = 0b10111111; // ground row1
  e2:	8f eb       	ldi	r24, 0xBF	; 191
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	85 e3       	ldi	r24, 0x35	; 53
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <get_key+0x34>
  ec:	00 00       	nop
	_delay_us(10);
	read_key = KEY_PIN & (0x0F);
  ee:	89 b1       	in	r24, 0x09	; 9
  f0:	8f 70       	andi	r24, 0x0F	; 15
  f2:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <read_key>
	if(read_key != 0x0F)
  f6:	8f 30       	cpi	r24, 0x0F	; 15
  f8:	51 f0       	breq	.+20     	; 0x10e <get_key+0x5a>
	{
		if (!(read_key & (1 << 0))) c = '4';
  fa:	80 ff       	sbrs	r24, 0
  fc:	3c c0       	rjmp	.+120    	; 0x176 <get_key+0xc2>
		else if (!(read_key & (1 << 1))) c = '5';
  fe:	81 ff       	sbrs	r24, 1
 100:	3c c0       	rjmp	.+120    	; 0x17a <get_key+0xc6>
		else if (!(read_key & (1 << 2))) c = '6';
 102:	82 ff       	sbrs	r24, 2
 104:	3c c0       	rjmp	.+120    	; 0x17e <get_key+0xca>
		else if (!(read_key & (1 << 3))) c = 'B';
 106:	88 70       	andi	r24, 0x08	; 8
 108:	e1 f1       	breq	.+120    	; 0x182 <get_key+0xce>
	return press;
}

char get_key()
{
	char c = 'x';
 10a:	88 e7       	ldi	r24, 0x78	; 120
 10c:	08 95       	ret
		else if (!(read_key & (1 << 1))) c = '5';
		else if (!(read_key & (1 << 2))) c = '6';
		else if (!(read_key & (1 << 3))) c = 'B';
		return c;
	}
	KEY_PORT  = 0b11011111; // ground row2
 10e:	8f ed       	ldi	r24, 0xDF	; 223
 110:	8b b9       	out	0x0b, r24	; 11
 112:	85 e3       	ldi	r24, 0x35	; 53
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <get_key+0x60>
 118:	00 00       	nop
	_delay_us(10);
	read_key = KEY_PIN & (0x0F);
 11a:	89 b1       	in	r24, 0x09	; 9
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <read_key>
	if(read_key != 0x0F)
 122:	8f 30       	cpi	r24, 0x0F	; 15
 124:	51 f0       	breq	.+20     	; 0x13a <get_key+0x86>
	{
		if (!(read_key & (1 << 0))) c = '7';
 126:	80 ff       	sbrs	r24, 0
 128:	2e c0       	rjmp	.+92     	; 0x186 <get_key+0xd2>
		else if (!(read_key & (1 << 1))) c = '8';
 12a:	81 ff       	sbrs	r24, 1
 12c:	2e c0       	rjmp	.+92     	; 0x18a <get_key+0xd6>
		else if (!(read_key & (1 << 2))) c = '9';
 12e:	82 ff       	sbrs	r24, 2
 130:	2e c0       	rjmp	.+92     	; 0x18e <get_key+0xda>
		else if (!(read_key & (1 << 3))) c = 'C';
 132:	88 70       	andi	r24, 0x08	; 8
 134:	71 f1       	breq	.+92     	; 0x192 <get_key+0xde>
	return press;
}

char get_key()
{
	char c = 'x';
 136:	88 e7       	ldi	r24, 0x78	; 120
 138:	08 95       	ret
		else if (!(read_key & (1 << 1))) c = '8';
		else if (!(read_key & (1 << 2))) c = '9';
		else if (!(read_key & (1 << 3))) c = 'C';
		return c;
	}
	KEY_PORT  = 0b11101111; // ground row3
 13a:	8f ee       	ldi	r24, 0xEF	; 239
 13c:	8b b9       	out	0x0b, r24	; 11
 13e:	85 e3       	ldi	r24, 0x35	; 53
 140:	8a 95       	dec	r24
 142:	f1 f7       	brne	.-4      	; 0x140 <get_key+0x8c>
 144:	00 00       	nop
	_delay_us(10);
	read_key = KEY_PIN & (0x0F);
 146:	89 b1       	in	r24, 0x09	; 9
 148:	8f 70       	andi	r24, 0x0F	; 15
 14a:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <read_key>
	if(read_key != 0x0F)
 14e:	8f 30       	cpi	r24, 0x0F	; 15
 150:	11 f1       	breq	.+68     	; 0x196 <get_key+0xe2>
	{
		if (!(read_key & (1 << 0))) c = 'E';
 152:	80 ff       	sbrs	r24, 0
 154:	22 c0       	rjmp	.+68     	; 0x19a <get_key+0xe6>
		else if (!(read_key & (1 << 1))) c = '0';
 156:	81 ff       	sbrs	r24, 1
 158:	22 c0       	rjmp	.+68     	; 0x19e <get_key+0xea>
		else if (!(read_key & (1 << 2))) c = 'F';
 15a:	82 ff       	sbrs	r24, 2
 15c:	22 c0       	rjmp	.+68     	; 0x1a2 <get_key+0xee>
		else if (!(read_key & (1 << 3))) c = 'D';
 15e:	88 70       	andi	r24, 0x08	; 8
 160:	11 f1       	breq	.+68     	; 0x1a6 <get_key+0xf2>
	return press;
}

char get_key()
{
	char c = 'x';
 162:	88 e7       	ldi	r24, 0x78	; 120
 164:	08 95       	ret
	KEY_PORT  = 0b01111111; // ground row0
	_delay_us(10);
	read_key = KEY_PIN & (0x0F);
	if(read_key != 0x0F)
	{
		if (!(read_key & (1<<0))) c = '1';
 166:	81 e3       	ldi	r24, 0x31	; 49
 168:	08 95       	ret
		else if (!(read_key & (1 << 1))) c = '2';
 16a:	82 e3       	ldi	r24, 0x32	; 50
 16c:	08 95       	ret
		else if (!(read_key & (1 << 2))) c = '3';
 16e:	83 e3       	ldi	r24, 0x33	; 51
 170:	08 95       	ret
		else if (!(read_key & (1 << 3))) c = 'A';
 172:	81 e4       	ldi	r24, 0x41	; 65
 174:	08 95       	ret
	KEY_PORT  = 0b10111111; // ground row1
	_delay_us(10);
	read_key = KEY_PIN & (0x0F);
	if(read_key != 0x0F)
	{
		if (!(read_key & (1 << 0))) c = '4';
 176:	84 e3       	ldi	r24, 0x34	; 52
 178:	08 95       	ret
		else if (!(read_key & (1 << 1))) c = '5';
 17a:	85 e3       	ldi	r24, 0x35	; 53
 17c:	08 95       	ret
		else if (!(read_key & (1 << 2))) c = '6';
 17e:	86 e3       	ldi	r24, 0x36	; 54
 180:	08 95       	ret
		else if (!(read_key & (1 << 3))) c = 'B';
 182:	82 e4       	ldi	r24, 0x42	; 66
 184:	08 95       	ret
	KEY_PORT  = 0b11011111; // ground row2
	_delay_us(10);
	read_key = KEY_PIN & (0x0F);
	if(read_key != 0x0F)
	{
		if (!(read_key & (1 << 0))) c = '7';
 186:	87 e3       	ldi	r24, 0x37	; 55
 188:	08 95       	ret
		else if (!(read_key & (1 << 1))) c = '8';
 18a:	88 e3       	ldi	r24, 0x38	; 56
 18c:	08 95       	ret
		else if (!(read_key & (1 << 2))) c = '9';
 18e:	89 e3       	ldi	r24, 0x39	; 57
 190:	08 95       	ret
		else if (!(read_key & (1 << 3))) c = 'C';
 192:	83 e4       	ldi	r24, 0x43	; 67
 194:	08 95       	ret
		else if (!(read_key & (1 << 1))) c = '0';
		else if (!(read_key & (1 << 2))) c = 'F';
		else if (!(read_key & (1 << 3))) c = 'D';
		return c;
	}
	return c;
 196:	88 e7       	ldi	r24, 0x78	; 120
 198:	08 95       	ret
	KEY_PORT  = 0b11101111; // ground row3
	_delay_us(10);
	read_key = KEY_PIN & (0x0F);
	if(read_key != 0x0F)
	{
		if (!(read_key & (1 << 0))) c = 'E';
 19a:	85 e4       	ldi	r24, 0x45	; 69
 19c:	08 95       	ret
		else if (!(read_key & (1 << 1))) c = '0';
 19e:	80 e3       	ldi	r24, 0x30	; 48
 1a0:	08 95       	ret
		else if (!(read_key & (1 << 2))) c = 'F';
 1a2:	86 e4       	ldi	r24, 0x46	; 70
 1a4:	08 95       	ret
		else if (!(read_key & (1 << 3))) c = 'D';
 1a6:	84 e4       	ldi	r24, 0x44	; 68
		return c;
	}
	return c;
}
 1a8:	08 95       	ret

000001aa <keypad_check>:

char keypad_check()
{
	char press;
	//ground all row
	KEY_PORT &= 0x0F;	
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	8f 70       	andi	r24, 0x0F	; 15
 1ae:	8b b9       	out	0x0b, r24	; 11
	// wait_for_release
	do{read_key = KEY_PIN & (0x0F);}while(read_key != 0x0F);
 1b0:	89 b1       	in	r24, 0x09	; 9
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <read_key>
 1b8:	8f 30       	cpi	r24, 0x0F	; 15
 1ba:	d1 f7       	brne	.-12     	; 0x1b0 <keypad_check+0x6>
	
	// wait_for_key (2 times to check if key really is pressed)
	do{read_key = KEY_PIN & (0x0F);}while(read_key == 0x0F);
 1bc:	89 b1       	in	r24, 0x09	; 9
 1be:	8f 70       	andi	r24, 0x0F	; 15
 1c0:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <read_key>
 1c4:	8f 30       	cpi	r24, 0x0F	; 15
 1c6:	d1 f3       	breq	.-12     	; 0x1bc <keypad_check+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	8f e5       	ldi	r24, 0x5F	; 95
 1ca:	9a ee       	ldi	r25, 0xEA	; 234
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <keypad_check+0x22>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <keypad_check+0x28>
 1d2:	00 00       	nop
	_delay_ms(15);
	do{read_key = KEY_PIN & (0x0F);}while(read_key == 0x0F);
 1d4:	89 b1       	in	r24, 0x09	; 9
 1d6:	8f 70       	andi	r24, 0x0F	; 15
 1d8:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <read_key>
 1dc:	8f 30       	cpi	r24, 0x0F	; 15
 1de:	d1 f3       	breq	.-12     	; 0x1d4 <keypad_check+0x2a>
	
	press = get_key();
 1e0:	0e 94 5a 00 	call	0xb4	; 0xb4 <get_key>
	return press;
}
 1e4:	08 95       	ret

000001e6 <lcd_putValue>:

#define   	LCD_RS  0              	//LCD RS
#define   	LCD_EN  1              	//LCD EN

void lcd_putValue(unsigned char val){
   	LCD_DPRT &= 0x0F; // CLR higher NIBBLE 
 1e6:	95 b1       	in	r25, 0x05	; 5
 1e8:	9f 70       	andi	r25, 0x0F	; 15
 1ea:	95 b9       	out	0x05, r25	; 5
   	LCD_DPRT |= (val&0xF0);       	//send cmnd to data port, select just higher nibble
 1ec:	95 b1       	in	r25, 0x05	; 5
 1ee:	28 2f       	mov	r18, r24
 1f0:	20 7f       	andi	r18, 0xF0	; 240
 1f2:	92 2b       	or	r25, r18
 1f4:	95 b9       	out	0x05, r25	; 5
   	LCD_CPRT |= (1<<LCD_EN);      	//EN = 1 for H-to-L pulse
 1f6:	95 b1       	in	r25, 0x05	; 5
 1f8:	92 60       	ori	r25, 0x02	; 2
 1fa:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	35 e0       	ldi	r19, 0x05	; 5
 1fe:	3a 95       	dec	r19
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_putValue+0x18>
 202:	00 00       	nop
   	_delay_us(1);                 	//wait to make enable wide
   	LCD_CPRT &= ~ (1<<LCD_EN); //EN = 0 for H-to-L pulse
 204:	95 b1       	in	r25, 0x05	; 5
 206:	9d 7f       	andi	r25, 0xFD	; 253
 208:	95 b9       	out	0x05, r25	; 5
 20a:	ef e8       	ldi	r30, 0x8F	; 143
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_putValue+0x28>
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_putValue+0x2e>
 214:	00 00       	nop
   	_delay_us(100);               	//wait to make enable wide
 
   	LCD_DPRT &= 0x0F;
 216:	95 b1       	in	r25, 0x05	; 5
 218:	9f 70       	andi	r25, 0x0F	; 15
 21a:	95 b9       	out	0x05, r25	; 5
   	LCD_DPRT |= val<<4;           	//send cmnd to data port
 21c:	25 b1       	in	r18, 0x05	; 5
 21e:	f0 e1       	ldi	r31, 0x10	; 16
 220:	8f 9f       	mul	r24, r31
 222:	c0 01       	movw	r24, r0
 224:	11 24       	eor	r1, r1
 226:	82 2b       	or	r24, r18
 228:	85 b9       	out	0x05, r24	; 5
   	LCD_CPRT |= (1<<LCD_EN);      	//EN = 1 for H-to-L pulse
 22a:	85 b1       	in	r24, 0x05	; 5
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	85 b9       	out	0x05, r24	; 5
 230:	35 e0       	ldi	r19, 0x05	; 5
 232:	3a 95       	dec	r19
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_putValue+0x4c>
 236:	00 00       	nop
   	_delay_us(1);                 	//wait to make enable wide
   	LCD_CPRT &= ~ (1<<LCD_EN); //EN = 0 for H-to-L pulse
 238:	85 b1       	in	r24, 0x05	; 5
 23a:	8d 7f       	andi	r24, 0xFD	; 253
 23c:	85 b9       	out	0x05, r24	; 5
 23e:	8f e8       	ldi	r24, 0x8F	; 143
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_putValue+0x5c>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_putValue+0x62>
 248:	00 00       	nop
 24a:	08 95       	ret

0000024c <lcdCommand>:
   	_delay_us(100);               	//wait to make enable wide    	
}
 
//*******************************************************
void lcdCommand( unsigned char cmnd ){  
   	LCD_CPRT &= ~ (1<<LCD_RS);    	//RS = 0 for command
 24c:	95 b1       	in	r25, 0x05	; 5
 24e:	9e 7f       	andi	r25, 0xFE	; 254
 250:	95 b9       	out	0x05, r25	; 5
   	lcd_putValue(cmnd);
 252:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_putValue>
 256:	08 95       	ret

00000258 <lcdData>:
 
//*******************************************************
//if you want to write a single char you can use this
void lcdData( unsigned char data )
{
   	LCD_CPRT |= (1<<LCD_RS);      	//RS = 1 for data   
 258:	95 b1       	in	r25, 0x05	; 5
 25a:	91 60       	ori	r25, 0x01	; 1
 25c:	95 b9       	out	0x05, r25	; 5
   	lcd_putValue(data); 
 25e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_putValue>
 262:	08 95       	ret

00000264 <lcd_clear>:
}
 
void lcd_clear()
{
   	lcdCommand(0x01);	
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 26 01 	call	0x24c	; 0x24c <lcdCommand>
 26a:	8f e8       	ldi	r24, 0x8F	; 143
 26c:	9a e1       	ldi	r25, 0x1A	; 26
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <lcd_clear+0xa>
 272:	00 c0       	rjmp	.+0      	; 0x274 <lcd_clear+0x10>
 274:	00 00       	nop
 276:	08 95       	ret

00000278 <lcd_showCursor>:
   	_delay_us(1700);
}
 
void lcd_showCursor()
{
   	lcdCommand(0x0E);
 278:	8e e0       	ldi	r24, 0x0E	; 14
 27a:	0e 94 26 01 	call	0x24c	; 0x24c <lcdCommand>
 27e:	87 ec       	ldi	r24, 0xC7	; 199
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <lcd_showCursor+0xa>
 286:	00 c0       	rjmp	.+0      	; 0x288 <lcd_showCursor+0x10>
 288:	00 00       	nop
 28a:	08 95       	ret

0000028c <lcd_hideCursor>:
   	_delay_us(50);
}
 
void lcd_hideCursor()
{
   	lcdCommand(0x0C);
 28c:	8c e0       	ldi	r24, 0x0C	; 12
 28e:	0e 94 26 01 	call	0x24c	; 0x24c <lcdCommand>
 292:	87 ec       	ldi	r24, 0xC7	; 199
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <lcd_hideCursor+0xa>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <lcd_hideCursor+0x10>
 29c:	00 00       	nop
 29e:	08 95       	ret

000002a0 <lcd_init>:
 
//*******************************************************
void lcd_init()
{
	// set DDRD and DDRB
   	LCD_DDDR |= 0xF0;
 2a0:	84 b1       	in	r24, 0x04	; 4
 2a2:	80 6f       	ori	r24, 0xF0	; 240
 2a4:	84 b9       	out	0x04, r24	; 4
   	LCD_CDDR |= (1<<LCD_RS)|(1<<LCD_EN);
 2a6:	84 b1       	in	r24, 0x04	; 4
 2a8:	83 60       	ori	r24, 0x03	; 3
 2aa:	84 b9       	out	0x04, r24	; 4
 
   	LCD_CPRT &=~(1<<LCD_EN);   //LCD_EN = 0
 2ac:	85 b1       	in	r24, 0x05	; 5
 2ae:	8d 7f       	andi	r24, 0xFD	; 253
 2b0:	85 b9       	out	0x05, r24	; 5
 2b2:	8f e3       	ldi	r24, 0x3F	; 63
 2b4:	9f e1       	ldi	r25, 0x1F	; 31
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <lcd_init+0x16>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <lcd_init+0x1c>
 2bc:	00 00       	nop
   	_delay_us(2000); 	//wait for init.
 
   	lcdCommand(0x33);	//send $33 for init.
 2be:	83 e3       	ldi	r24, 0x33	; 51
 2c0:	0e 94 26 01 	call	0x24c	; 0x24c <lcdCommand>
   	lcdCommand(0x32);	//send $32 for init
 2c4:	82 e3       	ldi	r24, 0x32	; 50
 2c6:	0e 94 26 01 	call	0x24c	; 0x24c <lcdCommand>
   	lcdCommand(0x28);	//init. LCD 2 line,5*7 matrix
 2ca:	88 e2       	ldi	r24, 0x28	; 40
 2cc:	0e 94 26 01 	call	0x24c	; 0x24c <lcdCommand>
   	lcdCommand(0x0e);	//display on, cursor on
 2d0:	8e e0       	ldi	r24, 0x0E	; 14
 2d2:	0e 94 26 01 	call	0x24c	; 0x24c <lcdCommand>
   	lcdCommand(0x06);	//after display shift cursor right
 2d6:	86 e0       	ldi	r24, 0x06	; 6
 2d8:	0e 94 26 01 	call	0x24c	; 0x24c <lcdCommand>
 
   	lcd_clear();     	
 2dc:	0e 94 32 01 	call	0x264	; 0x264 <lcd_clear>
 2e0:	08 95       	ret

000002e2 <lcd_gotoxy>:
}
 
//*******************************************************
void lcd_gotoxy(unsigned char x, unsigned char y)
{ 
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	00 d0       	rcall	.+0      	; 0x2e8 <lcd_gotoxy+0x6>
 2e8:	00 d0       	rcall	.+0      	; 0x2ea <lcd_gotoxy+0x8>
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
   	unsigned char firstCharAdr[]={0x80,0xC0,0x94,0xD4};//Table 12-4 
 2ee:	90 e8       	ldi	r25, 0x80	; 128
 2f0:	99 83       	std	Y+1, r25	; 0x01
 2f2:	90 ec       	ldi	r25, 0xC0	; 192
 2f4:	9a 83       	std	Y+2, r25	; 0x02
 2f6:	94 e9       	ldi	r25, 0x94	; 148
 2f8:	9b 83       	std	Y+3, r25	; 0x03
 2fa:	94 ed       	ldi	r25, 0xD4	; 212
 2fc:	9c 83       	std	Y+4, r25	; 0x04
   	lcdCommand(firstCharAdr[y-1] + x - 1);
 2fe:	e6 2f       	mov	r30, r22
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	31 97       	sbiw	r30, 0x01	; 1
 304:	21 e0       	ldi	r18, 0x01	; 1
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	2c 0f       	add	r18, r28
 30a:	3d 1f       	adc	r19, r29
 30c:	e2 0f       	add	r30, r18
 30e:	f3 1f       	adc	r31, r19
 310:	90 81       	ld	r25, Z
 312:	89 0f       	add	r24, r25
 314:	81 50       	subi	r24, 0x01	; 1
 316:	0e 94 26 01 	call	0x24c	; 0x24c <lcdCommand>
 31a:	8f e8       	ldi	r24, 0x8F	; 143
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <lcd_gotoxy+0x3c>
 322:	00 c0       	rjmp	.+0      	; 0x324 <lcd_gotoxy+0x42>
 324:	00 00       	nop
   	_delay_us(100);  	
}
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <lcd_print>:
 
//*******************************************************
void lcd_print( const char * str )
{
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	8c 01       	movw	r16, r24
   	unsigned char i = 0;
 33c:	c0 e0       	ldi	r28, 0x00	; 0
 
   	while(str[i] != 0) //while it is not end of string
 33e:	03 c0       	rjmp	.+6      	; 0x346 <lcd_print+0x12>
   	{
          	lcdData(str[i]);
 340:	0e 94 2c 01 	call	0x258	; 0x258 <lcdData>
          	i++ ;
 344:	cf 5f       	subi	r28, 0xFF	; 255
//*******************************************************
void lcd_print( const char * str )
{
   	unsigned char i = 0;
 
   	while(str[i] != 0) //while it is not end of string
 346:	f8 01       	movw	r30, r16
 348:	ec 0f       	add	r30, r28
 34a:	f1 1d       	adc	r31, r1
 34c:	80 81       	ld	r24, Z
 34e:	81 11       	cpse	r24, r1
 350:	f7 cf       	rjmp	.-18     	; 0x340 <lcd_print+0xc>
   	{
          	lcdData(str[i]);
          	i++ ;
   	}
}
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	08 95       	ret

0000035a <setup>:
}

void setup()
{
	// set up of LCD + KEYPAD is done in the .h called by init()
	keypad_init();
 35a:	0e 94 53 00 	call	0xa6	; 0xa6 <keypad_init>
	lcd_init();
 35e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_init>
	LED_DDR |= ((1<<green) | (1<<red));
 362:	84 b1       	in	r24, 0x04	; 4
 364:	8c 60       	ori	r24, 0x0C	; 12
 366:	84 b9       	out	0x04, r24	; 4
	
	//***** TIMER/COUNTER1 (for 1sec delay) *****
	TCCR1A = 0;
 368:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<CS12 | 1<<CS10 | 1<<WGM12); // Prescaler 1024, CTC MODE
 36c:	8d e0       	ldi	r24, 0x0D	; 13
 36e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 15624; // 15625-1
 372:	88 e0       	ldi	r24, 0x08	; 8
 374:	9d e3       	ldi	r25, 0x3D	; 61
 376:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 37a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	//***** TIMER/COUNTER0 for(blinking LED) *******
	// blinking LED f = 400hz using timer interrupt
	TCCR0A =  0;
 37e:	14 bc       	out	0x24, r1	; 36
	TCCR0B =  (1<<CS02) | (1<<CS00); //Prescaler 1024, normal mode
 380:	85 e0       	ldi	r24, 0x05	; 5
 382:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<< TOIE0);	//set mask bit 0;
 384:	ee e6       	ldi	r30, 0x6E	; 110
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	81 60       	ori	r24, 0x01	; 1
 38c:	80 83       	st	Z, r24
 38e:	08 95       	ret

00000390 <__vector_16>:
}


uint8_t timer0_interupt_count = 0;
ISR(TIMER0_OVF_vect)
{
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
	timer0_interupt_count++;
 39e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 3a2:	8f 5f       	subi	r24, 0xFF	; 255
 3a4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
	if(timer0_interupt_count == 12)
 3a8:	8c 30       	cpi	r24, 0x0C	; 12
 3aa:	31 f4       	brne	.+12     	; 0x3b8 <__vector_16+0x28>
	{
		timer0_interupt_count = 0;
 3ac:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
		LED_PORT ^= (1<<red);
 3b0:	95 b1       	in	r25, 0x05	; 5
 3b2:	88 e0       	ldi	r24, 0x08	; 8
 3b4:	89 27       	eor	r24, r25
 3b6:	85 b9       	out	0x05, r24	; 5
	}
}
 3b8:	9f 91       	pop	r25
 3ba:	8f 91       	pop	r24
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <counter_1sec>:

void counter_1sec()
{
	TCNT1 = 0x0000;
 3c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 3ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIFR1 |= (1<<OCF1A); // Clear Flag
 3ce:	86 b3       	in	r24, 0x16	; 22
 3d0:	82 60       	ori	r24, 0x02	; 2
 3d2:	86 bb       	out	0x16, r24	; 22
	while((TIFR1 & (1<<OCF1A))==0){}
 3d4:	b1 9b       	sbis	0x16, 1	; 22
 3d6:	fe cf       	rjmp	.-4      	; 0x3d4 <counter_1sec+0xe>
 3d8:	08 95       	ret

000003da <lockdown>:
		}
	}
}

void lockdown()
{
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
	lcd_clear();
 3de:	0e 94 32 01 	call	0x264	; 0x264 <lcd_clear>
	lcd_print("Lockdown Mode");
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_print>
	lcd_hideCursor();
 3ea:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_hideCursor>
	TCNT0 = 0x00;
 3ee:	16 bc       	out	0x26, r1	; 38
	sei();
 3f0:	78 94       	sei
	for(int i=0;i<30;i++){
 3f2:	c0 e0       	ldi	r28, 0x00	; 0
 3f4:	d0 e0       	ldi	r29, 0x00	; 0
 3f6:	03 c0       	rjmp	.+6      	; 0x3fe <lockdown+0x24>
		counter_1sec();
 3f8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <counter_1sec>
	lcd_clear();
	lcd_print("Lockdown Mode");
	lcd_hideCursor();
	TCNT0 = 0x00;
	sei();
	for(int i=0;i<30;i++){
 3fc:	21 96       	adiw	r28, 0x01	; 1
 3fe:	ce 31       	cpi	r28, 0x1E	; 30
 400:	d1 05       	cpc	r29, r1
 402:	d4 f3       	brlt	.-12     	; 0x3f8 <lockdown+0x1e>
		counter_1sec();
	}
	cli();
 404:	f8 94       	cli
	LED_PORT &= ~(1<<red);
 406:	85 b1       	in	r24, 0x05	; 5
 408:	87 7f       	andi	r24, 0xF7	; 247
 40a:	85 b9       	out	0x05, r24	; 5
	lcd_showCursor();
 40c:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_showCursor>
}
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <authenticate>:
	TCCR0B =  (1<<CS02) | (1<<CS00); //Prescaler 1024, normal mode
	TIMSK0 |= (1<< TOIE0);	//set mask bit 0;
}

void authenticate()
{	
 416:	ff 92       	push	r15
 418:	0f 93       	push	r16
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
 424:	2a 97       	sbiw	r28, 0x0a	; 10
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	f8 94       	cli
 42a:	de bf       	out	0x3e, r29	; 62
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	cd bf       	out	0x3d, r28	; 61
	uint8_t attempt = 0;
	char password[5] = "2544";
 430:	85 e0       	ldi	r24, 0x05	; 5
 432:	ea e3       	ldi	r30, 0x3A	; 58
 434:	f1 e0       	ldi	r31, 0x01	; 1
 436:	de 01       	movw	r26, r28
 438:	11 96       	adiw	r26, 0x01	; 1
 43a:	01 90       	ld	r0, Z+
 43c:	0d 92       	st	X+, r0
 43e:	8a 95       	dec	r24
 440:	e1 f7       	brne	.-8      	; 0x43a <authenticate+0x24>
	TIMSK0 |= (1<< TOIE0);	//set mask bit 0;
}

void authenticate()
{	
	uint8_t attempt = 0;
 442:	f1 2c       	mov	r15, r1
	char password[5] = "2544";
	while(1)
	{
		char buffer[5];
		lcd_clear();
 444:	0e 94 32 01 	call	0x264	; 0x264 <lcd_clear>
		lcd_print("Enter Passcode");
 448:	8e e0       	ldi	r24, 0x0E	; 14
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_print>
		lcd_gotoxy(1,2);
 450:	62 e0       	ldi	r22, 0x02	; 2
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_gotoxy>
		for(int i=0;i<4;i++)
 458:	00 e0       	ldi	r16, 0x00	; 0
 45a:	10 e0       	ldi	r17, 0x00	; 0
 45c:	0e c0       	rjmp	.+28     	; 0x47a <authenticate+0x64>
		{
			buffer[i] = keypad_check();
 45e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <keypad_check>
 462:	e6 e0       	ldi	r30, 0x06	; 6
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	ec 0f       	add	r30, r28
 468:	fd 1f       	adc	r31, r29
 46a:	e0 0f       	add	r30, r16
 46c:	f1 1f       	adc	r31, r17
 46e:	80 83       	st	Z, r24
			lcdData('*');
 470:	8a e2       	ldi	r24, 0x2A	; 42
 472:	0e 94 2c 01 	call	0x258	; 0x258 <lcdData>
	{
		char buffer[5];
		lcd_clear();
		lcd_print("Enter Passcode");
		lcd_gotoxy(1,2);
		for(int i=0;i<4;i++)
 476:	0f 5f       	subi	r16, 0xFF	; 255
 478:	1f 4f       	sbci	r17, 0xFF	; 255
 47a:	04 30       	cpi	r16, 0x04	; 4
 47c:	11 05       	cpc	r17, r1
 47e:	7c f3       	brlt	.-34     	; 0x45e <authenticate+0x48>
		{
			buffer[i] = keypad_check();
			lcdData('*');
		}
		buffer[4] = '\0';
 480:	1a 86       	std	Y+10, r1	; 0x0a
		if(strcmp(password,buffer) == 0)
 482:	be 01       	movw	r22, r28
 484:	6a 5f       	subi	r22, 0xFA	; 250
 486:	7f 4f       	sbci	r23, 0xFF	; 255
 488:	ce 01       	movw	r24, r28
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	0e 94 97 02 	call	0x52e	; 0x52e <strcmp>
 490:	89 2b       	or	r24, r25
 492:	d9 f4       	brne	.+54     	; 0x4ca <authenticate+0xb4>
		{
			lcd_hideCursor();
 494:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_hideCursor>
			lcd_clear();
 498:	0e 94 32 01 	call	0x264	; 0x264 <lcd_clear>
			lcd_print("Access Granted");
 49c:	8d e1       	ldi	r24, 0x1D	; 29
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_print>
			LED_PORT |= (1<<green);
 4a4:	85 b1       	in	r24, 0x05	; 5
 4a6:	84 60       	ori	r24, 0x04	; 4
 4a8:	85 b9       	out	0x05, r24	; 5
			for(int i=0;i<10;i++){
 4aa:	00 e0       	ldi	r16, 0x00	; 0
 4ac:	10 e0       	ldi	r17, 0x00	; 0
 4ae:	04 c0       	rjmp	.+8      	; 0x4b8 <authenticate+0xa2>
				counter_1sec();
 4b0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <counter_1sec>
		{
			lcd_hideCursor();
			lcd_clear();
			lcd_print("Access Granted");
			LED_PORT |= (1<<green);
			for(int i=0;i<10;i++){
 4b4:	0f 5f       	subi	r16, 0xFF	; 255
 4b6:	1f 4f       	sbci	r17, 0xFF	; 255
 4b8:	0a 30       	cpi	r16, 0x0A	; 10
 4ba:	11 05       	cpc	r17, r1
 4bc:	cc f3       	brlt	.-14     	; 0x4b0 <authenticate+0x9a>
				counter_1sec();
			}
			LED_PORT &= ~(1<<green);
 4be:	85 b1       	in	r24, 0x05	; 5
 4c0:	8b 7f       	andi	r24, 0xFB	; 251
 4c2:	85 b9       	out	0x05, r24	; 5
			lcd_showCursor();
 4c4:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_showCursor>
			}
			_delay_ms(1000);
			LED_PORT &= ~(1<<red);
		}
	}
}
 4c8:	21 c0       	rjmp	.+66     	; 0x50c <authenticate+0xf6>
			lcd_showCursor();
			break;
		}
		else
		{
			lcd_hideCursor();
 4ca:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_hideCursor>
			lcd_clear();
 4ce:	0e 94 32 01 	call	0x264	; 0x264 <lcd_clear>
			lcd_print("Access Denied");
 4d2:	8c e2       	ldi	r24, 0x2C	; 44
 4d4:	91 e0       	ldi	r25, 0x01	; 1
 4d6:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_print>
			LED_PORT |= (1<<red);
 4da:	85 b1       	in	r24, 0x05	; 5
 4dc:	88 60       	ori	r24, 0x08	; 8
 4de:	85 b9       	out	0x05, r24	; 5
			lcd_showCursor();
 4e0:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_showCursor>
			attempt++;
 4e4:	f3 94       	inc	r15
			if (attempt==3)
 4e6:	23 e0       	ldi	r18, 0x03	; 3
 4e8:	f2 12       	cpse	r15, r18
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <authenticate+0xdc>
			{
				attempt = 0;
				lockdown();	
 4ec:	0e 94 ed 01 	call	0x3da	; 0x3da <lockdown>
			LED_PORT |= (1<<red);
			lcd_showCursor();
			attempt++;
			if (attempt==3)
			{
				attempt = 0;
 4f0:	f1 2c       	mov	r15, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f2:	8f ef       	ldi	r24, 0xFF	; 255
 4f4:	93 ed       	ldi	r25, 0xD3	; 211
 4f6:	20 e3       	ldi	r18, 0x30	; 48
 4f8:	81 50       	subi	r24, 0x01	; 1
 4fa:	90 40       	sbci	r25, 0x00	; 0
 4fc:	20 40       	sbci	r18, 0x00	; 0
 4fe:	e1 f7       	brne	.-8      	; 0x4f8 <authenticate+0xe2>
 500:	00 c0       	rjmp	.+0      	; 0x502 <authenticate+0xec>
 502:	00 00       	nop
				lockdown();	
			}
			_delay_ms(1000);
			LED_PORT &= ~(1<<red);
 504:	85 b1       	in	r24, 0x05	; 5
 506:	87 7f       	andi	r24, 0xF7	; 247
 508:	85 b9       	out	0x05, r24	; 5
		}
	}
 50a:	9c cf       	rjmp	.-200    	; 0x444 <authenticate+0x2e>
}
 50c:	2a 96       	adiw	r28, 0x0a	; 10
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	f8 94       	cli
 512:	de bf       	out	0x3e, r29	; 62
 514:	0f be       	out	0x3f, r0	; 63
 516:	cd bf       	out	0x3d, r28	; 61
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	ff 90       	pop	r15
 522:	08 95       	ret

00000524 <main>:
// PORTB : LCD(4PIN MODE)+ LED
// PORTD : KEYPAD
 
int main(void)
{
	setup();
 524:	0e 94 ad 01 	call	0x35a	; 0x35a <setup>
	while(1){
		authenticate();
 528:	0e 94 0b 02 	call	0x416	; 0x416 <authenticate>
 52c:	fd cf       	rjmp	.-6      	; 0x528 <main+0x4>

0000052e <strcmp>:
 52e:	fb 01       	movw	r30, r22
 530:	dc 01       	movw	r26, r24
 532:	8d 91       	ld	r24, X+
 534:	01 90       	ld	r0, Z+
 536:	80 19       	sub	r24, r0
 538:	01 10       	cpse	r0, r1
 53a:	d9 f3       	breq	.-10     	; 0x532 <strcmp+0x4>
 53c:	99 0b       	sbc	r25, r25
 53e:	08 95       	ret

00000540 <_exit>:
 540:	f8 94       	cli

00000542 <__stop_program>:
 542:	ff cf       	rjmp	.-2      	; 0x542 <__stop_program>
