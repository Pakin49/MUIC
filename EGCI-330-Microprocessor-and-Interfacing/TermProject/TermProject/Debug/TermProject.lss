
TermProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  0000080c  000008a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000080c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800190  00800190  00000930  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ab  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086c  00000000  00000000  00002003  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa8  00000000  00000000  0000286f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00003318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fa  00000000  00000000  000034fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000baf  00000000  00000000  000039f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000045a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 df 03 	jmp	0x7be	; 0x7be <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 39       	cpi	r26, 0x90	; 144
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e9       	ldi	r26, 0x90	; 144
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 39       	cpi	r26, 0x92	; 146
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <main>
  9e:	0c 94 04 04 	jmp	0x808	; 0x808 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <keypad_init>:

uint8_t read_key;

void keypad_init()
{
	KEY_DDR |= 0xF0;//pin0-3 INPUT pin4-7 OUTPUT
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 6f       	ori	r24, 0xF0	; 240
  aa:	8a b9       	out	0x0a, r24	; 10
	KEY_PORT |= 0x0F; // Enable pull-up resistors for pins 0-3
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	8f 60       	ori	r24, 0x0F	; 15
  b0:	8b b9       	out	0x0b, r24	; 11
  b2:	08 95       	ret

000000b4 <get_key>:
}

char get_key()
{
	char c = 'x';
	KEY_PORT  = 0b01111111; // ground row0
  b4:	8f e7       	ldi	r24, 0x7F	; 127
  b6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	85 e3       	ldi	r24, 0x35	; 53
  ba:	8a 95       	dec	r24
  bc:	f1 f7       	brne	.-4      	; 0xba <get_key+0x6>
  be:	00 00       	nop
	_delay_us(10);
	read_key = KEY_PIN & (0x0F);
  c0:	89 b1       	in	r24, 0x09	; 9
  c2:	8f 70       	andi	r24, 0x0F	; 15
  c4:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <read_key>
	if(read_key != 0x0F)
  c8:	8f 30       	cpi	r24, 0x0F	; 15
  ca:	59 f0       	breq	.+22     	; 0xe2 <get_key+0x2e>
	{
		if (!(read_key & (1<<0))) c = '1';
  cc:	80 ff       	sbrs	r24, 0
  ce:	4b c0       	rjmp	.+150    	; 0x166 <get_key+0xb2>
		else if (!(read_key & (1 << 1))) c = '2';
  d0:	81 ff       	sbrs	r24, 1
  d2:	4b c0       	rjmp	.+150    	; 0x16a <get_key+0xb6>
		else if (!(read_key & (1 << 2))) c = '3';
  d4:	82 ff       	sbrs	r24, 2
  d6:	4b c0       	rjmp	.+150    	; 0x16e <get_key+0xba>
		else if (!(read_key & (1 << 3))) c = 'A';
  d8:	88 70       	andi	r24, 0x08	; 8
  da:	09 f4       	brne	.+2      	; 0xde <get_key+0x2a>
  dc:	4a c0       	rjmp	.+148    	; 0x172 <get_key+0xbe>
	return press;
}

char get_key()
{
	char c = 'x';
  de:	88 e7       	ldi	r24, 0x78	; 120
  e0:	08 95       	ret
		else if (!(read_key & (1 << 1))) c = '2';
		else if (!(read_key & (1 << 2))) c = '3';
		else if (!(read_key & (1 << 3))) c = 'A';
		return c;
	}
	KEY_PORT  = 0b10111111; // ground row1
  e2:	8f eb       	ldi	r24, 0xBF	; 191
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	85 e3       	ldi	r24, 0x35	; 53
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <get_key+0x34>
  ec:	00 00       	nop
	_delay_us(10);
	read_key = KEY_PIN & (0x0F);
  ee:	89 b1       	in	r24, 0x09	; 9
  f0:	8f 70       	andi	r24, 0x0F	; 15
  f2:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <read_key>
	if(read_key != 0x0F)
  f6:	8f 30       	cpi	r24, 0x0F	; 15
  f8:	51 f0       	breq	.+20     	; 0x10e <get_key+0x5a>
	{
		if (!(read_key & (1 << 0))) c = '4';
  fa:	80 ff       	sbrs	r24, 0
  fc:	3c c0       	rjmp	.+120    	; 0x176 <get_key+0xc2>
		else if (!(read_key & (1 << 1))) c = '5';
  fe:	81 ff       	sbrs	r24, 1
 100:	3c c0       	rjmp	.+120    	; 0x17a <get_key+0xc6>
		else if (!(read_key & (1 << 2))) c = '6';
 102:	82 ff       	sbrs	r24, 2
 104:	3c c0       	rjmp	.+120    	; 0x17e <get_key+0xca>
		else if (!(read_key & (1 << 3))) c = 'B';
 106:	88 70       	andi	r24, 0x08	; 8
 108:	e1 f1       	breq	.+120    	; 0x182 <get_key+0xce>
	return press;
}

char get_key()
{
	char c = 'x';
 10a:	88 e7       	ldi	r24, 0x78	; 120
 10c:	08 95       	ret
		else if (!(read_key & (1 << 1))) c = '5';
		else if (!(read_key & (1 << 2))) c = '6';
		else if (!(read_key & (1 << 3))) c = 'B';
		return c;
	}
	KEY_PORT  = 0b11011111; // ground row2
 10e:	8f ed       	ldi	r24, 0xDF	; 223
 110:	8b b9       	out	0x0b, r24	; 11
 112:	85 e3       	ldi	r24, 0x35	; 53
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <get_key+0x60>
 118:	00 00       	nop
	_delay_us(10);
	read_key = KEY_PIN & (0x0F);
 11a:	89 b1       	in	r24, 0x09	; 9
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <read_key>
	if(read_key != 0x0F)
 122:	8f 30       	cpi	r24, 0x0F	; 15
 124:	51 f0       	breq	.+20     	; 0x13a <get_key+0x86>
	{
		if (!(read_key & (1 << 0))) c = '7';
 126:	80 ff       	sbrs	r24, 0
 128:	2e c0       	rjmp	.+92     	; 0x186 <get_key+0xd2>
		else if (!(read_key & (1 << 1))) c = '8';
 12a:	81 ff       	sbrs	r24, 1
 12c:	2e c0       	rjmp	.+92     	; 0x18a <get_key+0xd6>
		else if (!(read_key & (1 << 2))) c = '9';
 12e:	82 ff       	sbrs	r24, 2
 130:	2e c0       	rjmp	.+92     	; 0x18e <get_key+0xda>
		else if (!(read_key & (1 << 3))) c = 'C';
 132:	88 70       	andi	r24, 0x08	; 8
 134:	71 f1       	breq	.+92     	; 0x192 <get_key+0xde>
	return press;
}

char get_key()
{
	char c = 'x';
 136:	88 e7       	ldi	r24, 0x78	; 120
 138:	08 95       	ret
		else if (!(read_key & (1 << 1))) c = '8';
		else if (!(read_key & (1 << 2))) c = '9';
		else if (!(read_key & (1 << 3))) c = 'C';
		return c;
	}
	KEY_PORT  = 0b11101111; // ground row3
 13a:	8f ee       	ldi	r24, 0xEF	; 239
 13c:	8b b9       	out	0x0b, r24	; 11
 13e:	85 e3       	ldi	r24, 0x35	; 53
 140:	8a 95       	dec	r24
 142:	f1 f7       	brne	.-4      	; 0x140 <get_key+0x8c>
 144:	00 00       	nop
	_delay_us(10);
	read_key = KEY_PIN & (0x0F);
 146:	89 b1       	in	r24, 0x09	; 9
 148:	8f 70       	andi	r24, 0x0F	; 15
 14a:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <read_key>
	if(read_key != 0x0F)
 14e:	8f 30       	cpi	r24, 0x0F	; 15
 150:	11 f1       	breq	.+68     	; 0x196 <get_key+0xe2>
	{
		if (!(read_key & (1 << 0))) c = 'E';
 152:	80 ff       	sbrs	r24, 0
 154:	22 c0       	rjmp	.+68     	; 0x19a <get_key+0xe6>
		else if (!(read_key & (1 << 1))) c = '0';
 156:	81 ff       	sbrs	r24, 1
 158:	22 c0       	rjmp	.+68     	; 0x19e <get_key+0xea>
		else if (!(read_key & (1 << 2))) c = 'F';
 15a:	82 ff       	sbrs	r24, 2
 15c:	22 c0       	rjmp	.+68     	; 0x1a2 <get_key+0xee>
		else if (!(read_key & (1 << 3))) c = 'D';
 15e:	88 70       	andi	r24, 0x08	; 8
 160:	11 f1       	breq	.+68     	; 0x1a6 <get_key+0xf2>
	return press;
}

char get_key()
{
	char c = 'x';
 162:	88 e7       	ldi	r24, 0x78	; 120
 164:	08 95       	ret
	KEY_PORT  = 0b01111111; // ground row0
	_delay_us(10);
	read_key = KEY_PIN & (0x0F);
	if(read_key != 0x0F)
	{
		if (!(read_key & (1<<0))) c = '1';
 166:	81 e3       	ldi	r24, 0x31	; 49
 168:	08 95       	ret
		else if (!(read_key & (1 << 1))) c = '2';
 16a:	82 e3       	ldi	r24, 0x32	; 50
 16c:	08 95       	ret
		else if (!(read_key & (1 << 2))) c = '3';
 16e:	83 e3       	ldi	r24, 0x33	; 51
 170:	08 95       	ret
		else if (!(read_key & (1 << 3))) c = 'A';
 172:	81 e4       	ldi	r24, 0x41	; 65
 174:	08 95       	ret
	KEY_PORT  = 0b10111111; // ground row1
	_delay_us(10);
	read_key = KEY_PIN & (0x0F);
	if(read_key != 0x0F)
	{
		if (!(read_key & (1 << 0))) c = '4';
 176:	84 e3       	ldi	r24, 0x34	; 52
 178:	08 95       	ret
		else if (!(read_key & (1 << 1))) c = '5';
 17a:	85 e3       	ldi	r24, 0x35	; 53
 17c:	08 95       	ret
		else if (!(read_key & (1 << 2))) c = '6';
 17e:	86 e3       	ldi	r24, 0x36	; 54
 180:	08 95       	ret
		else if (!(read_key & (1 << 3))) c = 'B';
 182:	82 e4       	ldi	r24, 0x42	; 66
 184:	08 95       	ret
	KEY_PORT  = 0b11011111; // ground row2
	_delay_us(10);
	read_key = KEY_PIN & (0x0F);
	if(read_key != 0x0F)
	{
		if (!(read_key & (1 << 0))) c = '7';
 186:	87 e3       	ldi	r24, 0x37	; 55
 188:	08 95       	ret
		else if (!(read_key & (1 << 1))) c = '8';
 18a:	88 e3       	ldi	r24, 0x38	; 56
 18c:	08 95       	ret
		else if (!(read_key & (1 << 2))) c = '9';
 18e:	89 e3       	ldi	r24, 0x39	; 57
 190:	08 95       	ret
		else if (!(read_key & (1 << 3))) c = 'C';
 192:	83 e4       	ldi	r24, 0x43	; 67
 194:	08 95       	ret
		else if (!(read_key & (1 << 1))) c = '0';
		else if (!(read_key & (1 << 2))) c = 'F';
		else if (!(read_key & (1 << 3))) c = 'D';
		return c;
	}
	return c;
 196:	88 e7       	ldi	r24, 0x78	; 120
 198:	08 95       	ret
	KEY_PORT  = 0b11101111; // ground row3
	_delay_us(10);
	read_key = KEY_PIN & (0x0F);
	if(read_key != 0x0F)
	{
		if (!(read_key & (1 << 0))) c = 'E';
 19a:	85 e4       	ldi	r24, 0x45	; 69
 19c:	08 95       	ret
		else if (!(read_key & (1 << 1))) c = '0';
 19e:	80 e3       	ldi	r24, 0x30	; 48
 1a0:	08 95       	ret
		else if (!(read_key & (1 << 2))) c = 'F';
 1a2:	86 e4       	ldi	r24, 0x46	; 70
 1a4:	08 95       	ret
		else if (!(read_key & (1 << 3))) c = 'D';
 1a6:	84 e4       	ldi	r24, 0x44	; 68
		return c;
	}
	return c;
}
 1a8:	08 95       	ret

000001aa <keypad_check>:

char keypad_check()
{
	char press;
	//ground all row
	KEY_PORT &= 0x0F;	
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	8f 70       	andi	r24, 0x0F	; 15
 1ae:	8b b9       	out	0x0b, r24	; 11
	// wait_for_release
	do{read_key = KEY_PIN & (0x0F);}while(read_key != 0x0F);
 1b0:	89 b1       	in	r24, 0x09	; 9
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <read_key>
 1b8:	8f 30       	cpi	r24, 0x0F	; 15
 1ba:	d1 f7       	brne	.-12     	; 0x1b0 <keypad_check+0x6>
	
	// wait_for_key (2 times to check if key really is pressed)
	do
	{
		read_key = KEY_PIN & (0x0F);
 1bc:	89 b1       	in	r24, 0x09	; 9
 1be:	8f 70       	andi	r24, 0x0F	; 15
 1c0:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <read_key>
		if(PINC & 1<<button_pin)
 1c4:	30 99       	sbic	0x06, 0	; 6
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <keypad_check+0x22>
			break;
	}while(read_key == 0x0F);
 1c8:	8f 30       	cpi	r24, 0x0F	; 15
 1ca:	c1 f3       	breq	.-16     	; 0x1bc <keypad_check+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	8f e5       	ldi	r24, 0x5F	; 95
 1ce:	9a ee       	ldi	r25, 0xEA	; 234
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <keypad_check+0x26>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <keypad_check+0x2c>
 1d6:	00 00       	nop
	_delay_ms(15);
	do
	{
		read_key = KEY_PIN & (0x0F);
 1d8:	89 b1       	in	r24, 0x09	; 9
 1da:	8f 70       	andi	r24, 0x0F	; 15
 1dc:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <read_key>
		if(PINC & 1<<button_pin)
 1e0:	30 99       	sbic	0x06, 0	; 6
 1e2:	05 c0       	rjmp	.+10     	; 0x1ee <keypad_check+0x44>
			return '\0';
	}while(read_key == 0x0F);
 1e4:	8f 30       	cpi	r24, 0x0F	; 15
 1e6:	c1 f3       	breq	.-16     	; 0x1d8 <keypad_check+0x2e>
	
	press = get_key();
 1e8:	0e 94 5a 00 	call	0xb4	; 0xb4 <get_key>
	return press;
 1ec:	08 95       	ret
	_delay_ms(15);
	do
	{
		read_key = KEY_PIN & (0x0F);
		if(PINC & 1<<button_pin)
			return '\0';
 1ee:	80 e0       	ldi	r24, 0x00	; 0
	}while(read_key == 0x0F);
	
	press = get_key();
	return press;
}
 1f0:	08 95       	ret

000001f2 <lcd_putValue>:

#define   	LCD_RS  0              	//LCD RS
#define   	LCD_EN  1              	//LCD EN

void lcd_putValue(unsigned char val){
   	LCD_DPRT &= 0x0F; // CLR higher NIBBLE 
 1f2:	95 b1       	in	r25, 0x05	; 5
 1f4:	9f 70       	andi	r25, 0x0F	; 15
 1f6:	95 b9       	out	0x05, r25	; 5
   	LCD_DPRT |= (val&0xF0);       	//send cmnd to data port, select just higher nibble
 1f8:	95 b1       	in	r25, 0x05	; 5
 1fa:	28 2f       	mov	r18, r24
 1fc:	20 7f       	andi	r18, 0xF0	; 240
 1fe:	92 2b       	or	r25, r18
 200:	95 b9       	out	0x05, r25	; 5
   	LCD_CPRT |= (1<<LCD_EN);      	//EN = 1 for H-to-L pulse
 202:	95 b1       	in	r25, 0x05	; 5
 204:	92 60       	ori	r25, 0x02	; 2
 206:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	35 e0       	ldi	r19, 0x05	; 5
 20a:	3a 95       	dec	r19
 20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_putValue+0x18>
 20e:	00 00       	nop
   	_delay_us(1);                 	//wait to make enable wide
   	LCD_CPRT &= ~ (1<<LCD_EN); //EN = 0 for H-to-L pulse
 210:	95 b1       	in	r25, 0x05	; 5
 212:	9d 7f       	andi	r25, 0xFD	; 253
 214:	95 b9       	out	0x05, r25	; 5
 216:	ef e8       	ldi	r30, 0x8F	; 143
 218:	f1 e0       	ldi	r31, 0x01	; 1
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <lcd_putValue+0x28>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <lcd_putValue+0x2e>
 220:	00 00       	nop
   	_delay_us(100);               	//wait to make enable wide
 
   	LCD_DPRT &= 0x0F;
 222:	95 b1       	in	r25, 0x05	; 5
 224:	9f 70       	andi	r25, 0x0F	; 15
 226:	95 b9       	out	0x05, r25	; 5
   	LCD_DPRT |= val<<4;           	//send cmnd to data port
 228:	25 b1       	in	r18, 0x05	; 5
 22a:	f0 e1       	ldi	r31, 0x10	; 16
 22c:	8f 9f       	mul	r24, r31
 22e:	c0 01       	movw	r24, r0
 230:	11 24       	eor	r1, r1
 232:	82 2b       	or	r24, r18
 234:	85 b9       	out	0x05, r24	; 5
   	LCD_CPRT |= (1<<LCD_EN);      	//EN = 1 for H-to-L pulse
 236:	85 b1       	in	r24, 0x05	; 5
 238:	82 60       	ori	r24, 0x02	; 2
 23a:	85 b9       	out	0x05, r24	; 5
 23c:	35 e0       	ldi	r19, 0x05	; 5
 23e:	3a 95       	dec	r19
 240:	f1 f7       	brne	.-4      	; 0x23e <lcd_putValue+0x4c>
 242:	00 00       	nop
   	_delay_us(1);                 	//wait to make enable wide
   	LCD_CPRT &= ~ (1<<LCD_EN); //EN = 0 for H-to-L pulse
 244:	85 b1       	in	r24, 0x05	; 5
 246:	8d 7f       	andi	r24, 0xFD	; 253
 248:	85 b9       	out	0x05, r24	; 5
 24a:	8f e8       	ldi	r24, 0x8F	; 143
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <lcd_putValue+0x5c>
 252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_putValue+0x62>
 254:	00 00       	nop
 256:	08 95       	ret

00000258 <lcdCommand>:
   	_delay_us(100);               	//wait to make enable wide    	
}
 
//*******************************************************
void lcdCommand( unsigned char cmnd ){  
   	LCD_CPRT &= ~ (1<<LCD_RS);    	//RS = 0 for command
 258:	95 b1       	in	r25, 0x05	; 5
 25a:	9e 7f       	andi	r25, 0xFE	; 254
 25c:	95 b9       	out	0x05, r25	; 5
   	lcd_putValue(cmnd);
 25e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_putValue>
 262:	08 95       	ret

00000264 <lcdData>:
 
//*******************************************************
//if you want to write a single char you can use this
void lcdData( unsigned char data )
{
   	LCD_CPRT |= (1<<LCD_RS);      	//RS = 1 for data   
 264:	95 b1       	in	r25, 0x05	; 5
 266:	91 60       	ori	r25, 0x01	; 1
 268:	95 b9       	out	0x05, r25	; 5
   	lcd_putValue(data); 
 26a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_putValue>
 26e:	08 95       	ret

00000270 <lcd_clear>:
}
 
void lcd_clear()
{
   	lcdCommand(0x01);	
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 2c 01 	call	0x258	; 0x258 <lcdCommand>
 276:	8f e8       	ldi	r24, 0x8F	; 143
 278:	9a e1       	ldi	r25, 0x1A	; 26
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_clear+0xa>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <lcd_clear+0x10>
 280:	00 00       	nop
 282:	08 95       	ret

00000284 <lcd_showCursor>:
   	_delay_us(1700);
}
 
void lcd_showCursor()
{
   	lcdCommand(0x0E);
 284:	8e e0       	ldi	r24, 0x0E	; 14
 286:	0e 94 2c 01 	call	0x258	; 0x258 <lcdCommand>
 28a:	87 ec       	ldi	r24, 0xC7	; 199
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <lcd_showCursor+0xa>
 292:	00 c0       	rjmp	.+0      	; 0x294 <lcd_showCursor+0x10>
 294:	00 00       	nop
 296:	08 95       	ret

00000298 <lcd_hideCursor>:
   	_delay_us(50);
}
 
void lcd_hideCursor()
{
   	lcdCommand(0x0C);
 298:	8c e0       	ldi	r24, 0x0C	; 12
 29a:	0e 94 2c 01 	call	0x258	; 0x258 <lcdCommand>
 29e:	87 ec       	ldi	r24, 0xC7	; 199
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <lcd_hideCursor+0xa>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <lcd_hideCursor+0x10>
 2a8:	00 00       	nop
 2aa:	08 95       	ret

000002ac <lcd_init>:
 
//*******************************************************
void lcd_init()
{
	// set DDRD and DDRB
   	LCD_DDDR |= 0xF0;
 2ac:	84 b1       	in	r24, 0x04	; 4
 2ae:	80 6f       	ori	r24, 0xF0	; 240
 2b0:	84 b9       	out	0x04, r24	; 4
   	LCD_CDDR |= (1<<LCD_RS)|(1<<LCD_EN);
 2b2:	84 b1       	in	r24, 0x04	; 4
 2b4:	83 60       	ori	r24, 0x03	; 3
 2b6:	84 b9       	out	0x04, r24	; 4
 
   	LCD_CPRT &=~(1<<LCD_EN);   //LCD_EN = 0
 2b8:	85 b1       	in	r24, 0x05	; 5
 2ba:	8d 7f       	andi	r24, 0xFD	; 253
 2bc:	85 b9       	out	0x05, r24	; 5
 2be:	8f e3       	ldi	r24, 0x3F	; 63
 2c0:	9f e1       	ldi	r25, 0x1F	; 31
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <lcd_init+0x16>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <lcd_init+0x1c>
 2c8:	00 00       	nop
   	_delay_us(2000); 	//wait for init.
 
   	lcdCommand(0x33);	//send $33 for init.
 2ca:	83 e3       	ldi	r24, 0x33	; 51
 2cc:	0e 94 2c 01 	call	0x258	; 0x258 <lcdCommand>
   	lcdCommand(0x32);	//send $32 for init
 2d0:	82 e3       	ldi	r24, 0x32	; 50
 2d2:	0e 94 2c 01 	call	0x258	; 0x258 <lcdCommand>
   	lcdCommand(0x28);	//init. LCD 2 line,5*7 matrix
 2d6:	88 e2       	ldi	r24, 0x28	; 40
 2d8:	0e 94 2c 01 	call	0x258	; 0x258 <lcdCommand>
   	lcdCommand(0x0e);	//display on, cursor on
 2dc:	8e e0       	ldi	r24, 0x0E	; 14
 2de:	0e 94 2c 01 	call	0x258	; 0x258 <lcdCommand>
   	lcdCommand(0x06);	//after display shift cursor right
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	0e 94 2c 01 	call	0x258	; 0x258 <lcdCommand>
 
   	lcd_clear();     	
 2e8:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clear>
 2ec:	08 95       	ret

000002ee <lcd_gotoxy>:
}
 
//*******************************************************
void lcd_gotoxy(unsigned char x, unsigned char y)
{ 
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <lcd_gotoxy+0x6>
 2f4:	00 d0       	rcall	.+0      	; 0x2f6 <lcd_gotoxy+0x8>
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
   	unsigned char firstCharAdr[]={0x80,0xC0,0x94,0xD4};//Table 12-4 
 2fa:	90 e8       	ldi	r25, 0x80	; 128
 2fc:	99 83       	std	Y+1, r25	; 0x01
 2fe:	90 ec       	ldi	r25, 0xC0	; 192
 300:	9a 83       	std	Y+2, r25	; 0x02
 302:	94 e9       	ldi	r25, 0x94	; 148
 304:	9b 83       	std	Y+3, r25	; 0x03
 306:	94 ed       	ldi	r25, 0xD4	; 212
 308:	9c 83       	std	Y+4, r25	; 0x04
   	lcdCommand(firstCharAdr[y-1] + x - 1);
 30a:	e6 2f       	mov	r30, r22
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	21 e0       	ldi	r18, 0x01	; 1
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	2c 0f       	add	r18, r28
 316:	3d 1f       	adc	r19, r29
 318:	e2 0f       	add	r30, r18
 31a:	f3 1f       	adc	r31, r19
 31c:	90 81       	ld	r25, Z
 31e:	89 0f       	add	r24, r25
 320:	81 50       	subi	r24, 0x01	; 1
 322:	0e 94 2c 01 	call	0x258	; 0x258 <lcdCommand>
 326:	8f e8       	ldi	r24, 0x8F	; 143
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <lcd_gotoxy+0x3c>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <lcd_gotoxy+0x42>
 330:	00 00       	nop
   	_delay_us(100);  	
}
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <lcd_print>:
 
//*******************************************************
void lcd_print( const char * str )
{
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	8c 01       	movw	r16, r24
   	unsigned char i = 0;
 348:	c0 e0       	ldi	r28, 0x00	; 0
 
   	while(str[i] != 0) //while it is not end of string
 34a:	03 c0       	rjmp	.+6      	; 0x352 <lcd_print+0x12>
   	{
          	lcdData(str[i]);
 34c:	0e 94 32 01 	call	0x264	; 0x264 <lcdData>
          	i++ ;
 350:	cf 5f       	subi	r28, 0xFF	; 255
//*******************************************************
void lcd_print( const char * str )
{
   	unsigned char i = 0;
 
   	while(str[i] != 0) //while it is not end of string
 352:	f8 01       	movw	r30, r16
 354:	ec 0f       	add	r30, r28
 356:	f1 1d       	adc	r31, r1
 358:	80 81       	ld	r24, Z
 35a:	81 11       	cpse	r24, r1
 35c:	f7 cf       	rjmp	.-18     	; 0x34c <lcd_print+0xc>
   	{
          	lcdData(str[i]);
          	i++ ;
   	}
}
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	08 95       	ret

00000366 <setup>:
	}
}

void setup()
{
	keypad_init();
 366:	0e 94 53 00 	call	0xa6	; 0xa6 <keypad_init>
	lcd_init();
 36a:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_init>
	DDRC &= ~(1<<button_pin | 1<<switch_pin );
 36e:	87 b1       	in	r24, 0x07	; 7
 370:	8c 7f       	andi	r24, 0xFC	; 252
 372:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1<<LED_pin);
 374:	87 b1       	in	r24, 0x07	; 7
 376:	84 60       	ori	r24, 0x04	; 4
 378:	87 b9       	out	0x07, r24	; 7
	
//*************** Timer/Counter ***************
	TCCR1A = 0;
 37a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<CS12 | 1<<CS10 | 1<<WGM12); // Prescaler 1024, CTC MODE 
 37e:	8d e0       	ldi	r24, 0x0D	; 13
 380:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 15624; // 15625-1
 384:	88 e0       	ldi	r24, 0x08	; 8
 386:	9d e3       	ldi	r25, 0x3D	; 61
 388:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 38c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

//*************** While ***************
	PCMSK1 |= (1<<0);
 390:	ec e6       	ldi	r30, 0x6C	; 108
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	81 60       	ori	r24, 0x01	; 1
 398:	80 83       	st	Z, r24
	PCIFR |= (1 << PCIF1);      // Clear any pending interrupt flag AFTER configuration
 39a:	8b b3       	in	r24, 0x1b	; 27
 39c:	82 60       	ori	r24, 0x02	; 2
 39e:	8b bb       	out	0x1b, r24	; 27
	sei();
 3a0:	78 94       	sei
 3a2:	08 95       	ret

000003a4 <authenticate>:
}

void authenticate()
{
 3a4:	ef 92       	push	r14
 3a6:	ff 92       	push	r15
 3a8:	0f 93       	push	r16
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
 3b4:	2a 97       	sbiw	r28, 0x0a	; 10
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	f8 94       	cli
 3ba:	de bf       	out	0x3e, r29	; 62
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	cd bf       	out	0x3d, r28	; 61
//*************** authentication ***************
	char password[5] = "2544";
 3c0:	85 e0       	ldi	r24, 0x05	; 5
 3c2:	e0 e4       	ldi	r30, 0x40	; 64
 3c4:	f1 e0       	ldi	r31, 0x01	; 1
 3c6:	de 01       	movw	r26, r28
 3c8:	11 96       	adiw	r26, 0x01	; 1
 3ca:	01 90       	ld	r0, Z+
 3cc:	0d 92       	st	X+, r0
 3ce:	8a 95       	dec	r24
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <authenticate+0x26>
	while(1)
	{	
		char buffer[5];
		lcd_clear();
 3d2:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clear>
		lcd_print("Enter 4 digits");
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
		lcd_gotoxy(1,2);
 3de:	62 e0       	ldi	r22, 0x02	; 2
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_gotoxy>
		lcd_print("Password:");
 3e6:	8f e0       	ldi	r24, 0x0F	; 15
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
		for(int i=0;i<5;i++)
 3ee:	00 e0       	ldi	r16, 0x00	; 0
 3f0:	10 e0       	ldi	r17, 0x00	; 0
 3f2:	74 c0       	rjmp	.+232    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
		{
			buffer[i] = keypad_check();
 3f4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <keypad_check>
 3f8:	0f 2e       	mov	r0, r31
 3fa:	f6 e0       	ldi	r31, 0x06	; 6
 3fc:	ef 2e       	mov	r14, r31
 3fe:	f1 2c       	mov	r15, r1
 400:	f0 2d       	mov	r31, r0
 402:	ec 0e       	add	r14, r28
 404:	fd 1e       	adc	r15, r29
 406:	e0 0e       	add	r14, r16
 408:	f1 1e       	adc	r15, r17
 40a:	f7 01       	movw	r30, r14
 40c:	80 83       	st	Z, r24
			lcdData('*');
 40e:	8a e2       	ldi	r24, 0x2A	; 42
 410:	0e 94 32 01 	call	0x264	; 0x264 <lcdData>
			if(buffer[i] == '\0')
 414:	f7 01       	movw	r30, r14
 416:	80 81       	ld	r24, Z
 418:	81 11       	cpse	r24, r1
 41a:	30 c0       	rjmp	.+96     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
			{
				if(i==4)
 41c:	04 30       	cpi	r16, 0x04	; 4
 41e:	11 05       	cpc	r17, r1
 420:	09 f4       	brne	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 422:	60 c0       	rjmp	.+192    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
					break;
				else // password is not 4 digits and user enter
				{	
					lcd_hideCursor();
 424:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_hideCursor>
					lcd_clear();
 428:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clear>
					lcd_print("4 digits");
 42c:	86 e0       	ldi	r24, 0x06	; 6
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
					lcd_gotoxy(1,2);
 434:	62 e0       	ldi	r22, 0x02	; 2
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_gotoxy>
					lcd_print("password");
 43c:	89 e1       	ldi	r24, 0x19	; 25
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 444:	ff ef       	ldi	r31, 0xFF	; 255
 446:	27 ea       	ldi	r18, 0xA7	; 167
 448:	81 e6       	ldi	r24, 0x61	; 97
 44a:	f1 50       	subi	r31, 0x01	; 1
 44c:	20 40       	sbci	r18, 0x00	; 0
 44e:	80 40       	sbci	r24, 0x00	; 0
 450:	e1 f7       	brne	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	00 c0       	rjmp	.+0      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 454:	00 00       	nop
					_delay_ms(2000);
					lcd_clear();
 456:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clear>
					lcd_print("Enter 4 digits");
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
					lcd_gotoxy(1,2);
 462:	62 e0       	ldi	r22, 0x02	; 2
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_gotoxy>
					lcd_print("Password:");
 46a:	8f e0       	ldi	r24, 0x0F	; 15
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
					lcd_showCursor();
 472:	0e 94 42 01 	call	0x284	; 0x284 <lcd_showCursor>
					i = -1;
 476:	0f ef       	ldi	r16, 0xFF	; 255
 478:	1f ef       	ldi	r17, 0xFF	; 255
					continue;
 47a:	2e c0       	rjmp	.+92     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
				}
			}
			if (i==4)// user enter more than 4 number
 47c:	04 30       	cpi	r16, 0x04	; 4
 47e:	11 05       	cpc	r17, r1
 480:	59 f5       	brne	.+86     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
			{
				lcd_clear();
 482:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clear>
				lcd_print("4 digits");
 486:	86 e0       	ldi	r24, 0x06	; 6
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
				lcd_gotoxy(1,2);
 48e:	62 e0       	ldi	r22, 0x02	; 2
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_gotoxy>
				lcd_print("password");
 496:	89 e1       	ldi	r24, 0x19	; 25
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
				lcd_hideCursor();
 49e:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_hideCursor>
 4a2:	9f ef       	ldi	r25, 0xFF	; 255
 4a4:	e7 ea       	ldi	r30, 0xA7	; 167
 4a6:	f1 e6       	ldi	r31, 0x61	; 97
 4a8:	91 50       	subi	r25, 0x01	; 1
 4aa:	e0 40       	sbci	r30, 0x00	; 0
 4ac:	f0 40       	sbci	r31, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4b2:	00 00       	nop
				i = 0;
				_delay_ms(2000);
				lcd_clear();
 4b4:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clear>
				lcd_print("Enter 4 digits");
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
				lcd_gotoxy(1,2);
 4c0:	62 e0       	ldi	r22, 0x02	; 2
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_gotoxy>
				lcd_print("Password:");
 4c8:	8f e0       	ldi	r24, 0x0F	; 15
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
				lcd_showCursor();
 4d0:	0e 94 42 01 	call	0x284	; 0x284 <lcd_showCursor>
				i = -1;
 4d4:	0f ef       	ldi	r16, 0xFF	; 255
 4d6:	1f ef       	ldi	r17, 0xFF	; 255
		char buffer[5];
		lcd_clear();
		lcd_print("Enter 4 digits");
		lcd_gotoxy(1,2);
		lcd_print("Password:");
		for(int i=0;i<5;i++)
 4d8:	0f 5f       	subi	r16, 0xFF	; 255
 4da:	1f 4f       	sbci	r17, 0xFF	; 255
 4dc:	05 30       	cpi	r16, 0x05	; 5
 4de:	11 05       	cpc	r17, r1
 4e0:	0c f4       	brge	.+2      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4e2:	88 cf       	rjmp	.-240    	; 0x3f4 <authenticate+0x50>
				lcd_showCursor();
				i = -1;
				continue;
			}
		}
		if(strcmp(password,buffer) == 0)
 4e4:	be 01       	movw	r22, r28
 4e6:	6a 5f       	subi	r22, 0xFA	; 250
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ea:	ce 01       	movw	r24, r28
 4ec:	01 96       	adiw	r24, 0x01	; 1
 4ee:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <strcmp>
 4f2:	89 2b       	or	r24, r25
 4f4:	a1 f4       	brne	.+40     	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
		{	
			lcd_hideCursor();
 4f6:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_hideCursor>
			lcd_clear();
 4fa:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clear>
			lcd_print("Access Granted");
 4fe:	82 e2       	ldi	r24, 0x22	; 34
 500:	91 e0       	ldi	r25, 0x01	; 1
 502:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
 506:	2f ef       	ldi	r18, 0xFF	; 255
 508:	87 ea       	ldi	r24, 0xA7	; 167
 50a:	91 e6       	ldi	r25, 0x61	; 97
 50c:	21 50       	subi	r18, 0x01	; 1
 50e:	80 40       	sbci	r24, 0x00	; 0
 510:	90 40       	sbci	r25, 0x00	; 0
 512:	e1 f7       	brne	.-8      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 514:	00 c0       	rjmp	.+0      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 516:	00 00       	nop
			_delay_ms(2000);
			lcd_showCursor();
 518:	0e 94 42 01 	call	0x284	; 0x284 <lcd_showCursor>
			lcd_print("Access denied!");
			_delay_ms(2000);
			lcd_showCursor();
		}
	}	
}
 51c:	14 c0       	rjmp	.+40     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
			lcd_showCursor();
			break;
		}
		else
		{	
			lcd_hideCursor();
 51e:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_hideCursor>
			lcd_clear();
 522:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clear>
			lcd_print("Access denied!");
 526:	81 e3       	ldi	r24, 0x31	; 49
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
 52e:	ef ef       	ldi	r30, 0xFF	; 255
 530:	f7 ea       	ldi	r31, 0xA7	; 167
 532:	21 e6       	ldi	r18, 0x61	; 97
 534:	e1 50       	subi	r30, 0x01	; 1
 536:	f0 40       	sbci	r31, 0x00	; 0
 538:	20 40       	sbci	r18, 0x00	; 0
 53a:	e1 f7       	brne	.-8      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
 53e:	00 00       	nop
			_delay_ms(2000);
			lcd_showCursor();
 540:	0e 94 42 01 	call	0x284	; 0x284 <lcd_showCursor>
		}
	}	
 544:	46 cf       	rjmp	.-372    	; 0x3d2 <authenticate+0x2e>
}
 546:	2a 96       	adiw	r28, 0x0a	; 10
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	f8 94       	cli
 54c:	de bf       	out	0x3e, r29	; 62
 54e:	0f be       	out	0x3f, r0	; 63
 550:	cd bf       	out	0x3d, r28	; 61
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	1f 91       	pop	r17
 558:	0f 91       	pop	r16
 55a:	ff 90       	pop	r15
 55c:	ef 90       	pop	r14
 55e:	08 95       	ret

00000560 <hex_to_ASCII>:
	lcd_showCursor();
}
	
char hex_to_ASCII(int hex) {
	char ascii;	
	if (hex < 0 || hex > 15)
 560:	28 2f       	mov	r18, r24
 562:	39 2f       	mov	r19, r25
 564:	20 31       	cpi	r18, 0x10	; 16
 566:	31 05       	cpc	r19, r1
 568:	38 f4       	brcc	.+14     	; 0x578 <hex_to_ASCII+0x18>
		return '\0'; 
	if (hex >= 0 && hex <= 9)
 56a:	2a 30       	cpi	r18, 0x0A	; 10
 56c:	31 05       	cpc	r19, r1
 56e:	10 f4       	brcc	.+4      	; 0x574 <hex_to_ASCII+0x14>
		ascii = '0' + hex;
 570:	80 5d       	subi	r24, 0xD0	; 208
 572:	08 95       	ret
	else 
		ascii = 'A' + (hex - 10);
 574:	89 5c       	subi	r24, 0xC9	; 201
 576:	08 95       	ret
}
	
char hex_to_ASCII(int hex) {
	char ascii;	
	if (hex < 0 || hex > 15)
		return '\0'; 
 578:	80 e0       	ldi	r24, 0x00	; 0
	if (hex >= 0 && hex <= 9)
		ascii = '0' + hex;
	else 
		ascii = 'A' + (hex - 10);
	return ascii; 
}
 57a:	08 95       	ret

0000057c <ASCII_to_int>:


int ASCII_to_int(char ascii)
{
	int i = -1;
	if (ascii >= '0' && ascii <= '9')
 57c:	90 ed       	ldi	r25, 0xD0	; 208
 57e:	98 0f       	add	r25, r24
 580:	9a 30       	cpi	r25, 0x0A	; 10
 582:	18 f4       	brcc	.+6      	; 0x58a <ASCII_to_int+0xe>
		i = ascii-'0';
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	c0 97       	sbiw	r24, 0x30	; 48
 588:	08 95       	ret
	else if (ascii >= 'A' && ascii <= 'F')
 58a:	9f eb       	ldi	r25, 0xBF	; 191
 58c:	98 0f       	add	r25, r24
 58e:	96 30       	cpi	r25, 0x06	; 6
 590:	18 f4       	brcc	.+6      	; 0x598 <ASCII_to_int+0x1c>
		i = ascii-'A'+10;
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	c7 97       	sbiw	r24, 0x37	; 55
 596:	08 95       	ret
}


int ASCII_to_int(char ascii)
{
	int i = -1;
 598:	8f ef       	ldi	r24, 0xFF	; 255
 59a:	9f ef       	ldi	r25, 0xFF	; 255
	if (ascii >= '0' && ascii <= '9')
		i = ascii-'0';
	else if (ascii >= 'A' && ascii <= 'F')
		i = ascii-'A'+10;
	return i;
}
 59c:	08 95       	ret

0000059e <counter_1sec>:

void counter_1sec()
{
	TCNT1 = 0x0000;
 59e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 5a2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIFR1 |= (1<<OCF1A); // Clear Flag
 5a6:	86 b3       	in	r24, 0x16	; 22
 5a8:	82 60       	ori	r24, 0x02	; 2
 5aa:	86 bb       	out	0x16, r24	; 22
	while((TIFR1 & (1<<OCF1A))==0)
 5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <counter_1sec+0x18>
	{
		if(reset_button)
 5ae:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
 5b2:	81 11       	cpse	r24, r1
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <counter_1sec+0x1c>

void counter_1sec()
{
	TCNT1 = 0x0000;
	TIFR1 |= (1<<OCF1A); // Clear Flag
	while((TIFR1 & (1<<OCF1A))==0)
 5b6:	b1 9b       	sbis	0x16, 1	; 22
 5b8:	fa cf       	rjmp	.-12     	; 0x5ae <counter_1sec+0x10>
 5ba:	08 95       	ret

000005bc <timer>:
	}	
}

uint8_t reset_button = 0;
void timer()
{
 5bc:	8f 92       	push	r8
 5be:	9f 92       	push	r9
 5c0:	af 92       	push	r10
 5c2:	bf 92       	push	r11
 5c4:	cf 92       	push	r12
 5c6:	df 92       	push	r13
 5c8:	ef 92       	push	r14
 5ca:	ff 92       	push	r15
 5cc:	1f 93       	push	r17
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
//***************  set timer ***************
	lcd_clear();
 5d2:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clear>
	lcd_print("Set timer(HEX)");
 5d6:	85 e4       	ldi	r24, 0x45	; 69
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
	lcd_gotoxy(1,2);
 5de:	62 e0       	ldi	r22, 0x02	; 2
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_gotoxy>
	uint32_t countdown = 0;
	uint8_t n_digit = 0;
	for(int i = 0; i<9; i++)
 5e6:	c0 e0       	ldi	r28, 0x00	; 0
 5e8:	d0 e0       	ldi	r29, 0x00	; 0
{
//***************  set timer ***************
	lcd_clear();
	lcd_print("Set timer(HEX)");
	lcd_gotoxy(1,2);
	uint32_t countdown = 0;
 5ea:	81 2c       	mov	r8, r1
 5ec:	91 2c       	mov	r9, r1
 5ee:	54 01       	movw	r10, r8
	uint8_t n_digit = 0;
	for(int i = 0; i<9; i++)
 5f0:	4f c0       	rjmp	.+158    	; 0x690 <timer+0xd4>
	{	
		char key;
		key = keypad_check();
 5f2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <keypad_check>
 5f6:	f8 2e       	mov	r15, r24
		if((key == '\0'))
 5f8:	81 11       	cpse	r24, r1
 5fa:	03 c0       	rjmp	.+6      	; 0x602 <timer+0x46>
		{
			n_digit = i-1;
 5fc:	1c 2f       	mov	r17, r28
 5fe:	11 50       	subi	r17, 0x01	; 1
			break;
 600:	4c c0       	rjmp	.+152    	; 0x69a <timer+0xde>
		}
		if(i==8) // if insert timer more than 8 digits
 602:	c8 30       	cpi	r28, 0x08	; 8
 604:	d1 05       	cpc	r29, r1
 606:	f1 f4       	brne	.+60     	; 0x644 <timer+0x88>
		{
			lcd_clear();
 608:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clear>
			lcd_hideCursor();
 60c:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_hideCursor>
			lcd_print("Maximum 8bits");
 610:	84 e5       	ldi	r24, 0x54	; 84
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
 618:	2f ef       	ldi	r18, 0xFF	; 255
 61a:	37 ea       	ldi	r19, 0xA7	; 167
 61c:	41 e6       	ldi	r20, 0x61	; 97
 61e:	21 50       	subi	r18, 0x01	; 1
 620:	30 40       	sbci	r19, 0x00	; 0
 622:	40 40       	sbci	r20, 0x00	; 0
 624:	e1 f7       	brne	.-8      	; 0x61e <timer+0x62>
 626:	00 c0       	rjmp	.+0      	; 0x628 <timer+0x6c>
 628:	00 00       	nop
			_delay_ms(2000);
			lcd_print("Set timer(HEX)");
 62a:	85 e4       	ldi	r24, 0x45	; 69
 62c:	91 e0       	ldi	r25, 0x01	; 1
 62e:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
			lcd_showCursor();
 632:	0e 94 42 01 	call	0x284	; 0x284 <lcd_showCursor>
			lcd_gotoxy(1,2);
 636:	62 e0       	ldi	r22, 0x02	; 2
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_gotoxy>
			i = 0;
 63e:	c0 e0       	ldi	r28, 0x00	; 0
 640:	d0 e0       	ldi	r29, 0x00	; 0
			continue;
 642:	25 c0       	rjmp	.+74     	; 0x68e <timer+0xd2>
		}
		lcdData(key);
 644:	0e 94 32 01 	call	0x264	; 0x264 <lcdData>
		uint8_t value = ASCII_to_int(key);
 648:	8f 2d       	mov	r24, r15
 64a:	0e 94 be 02 	call	0x57c	; 0x57c <ASCII_to_int>
		//error correction
		if (value < 0 || value > 15)
 64e:	80 31       	cpi	r24, 0x10	; 16
 650:	50 f0       	brcs	.+20     	; 0x666 <timer+0xaa>
		{
			lcd_clear();
 652:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clear>
			lcd_print("Error :");
 656:	82 e6       	ldi	r24, 0x62	; 98
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
			lcdData(key);
 65e:	8f 2d       	mov	r24, r15
 660:	0e 94 32 01 	call	0x264	; 0x264 <lcdData>
			return;
 664:	94 c0       	rjmp	.+296    	; 0x78e <timer+0x1d2>
		}
		countdown = countdown<<(4*1);
 666:	88 0c       	add	r8, r8
 668:	99 1c       	adc	r9, r9
 66a:	aa 1c       	adc	r10, r10
 66c:	bb 1c       	adc	r11, r11
 66e:	88 0c       	add	r8, r8
 670:	99 1c       	adc	r9, r9
 672:	aa 1c       	adc	r10, r10
 674:	bb 1c       	adc	r11, r11
 676:	88 0c       	add	r8, r8
 678:	99 1c       	adc	r9, r9
 67a:	aa 1c       	adc	r10, r10
 67c:	bb 1c       	adc	r11, r11
 67e:	88 0c       	add	r8, r8
 680:	99 1c       	adc	r9, r9
 682:	aa 1c       	adc	r10, r10
 684:	bb 1c       	adc	r11, r11
		countdown += value;
 686:	88 0e       	add	r8, r24
 688:	91 1c       	adc	r9, r1
 68a:	a1 1c       	adc	r10, r1
 68c:	b1 1c       	adc	r11, r1
	lcd_clear();
	lcd_print("Set timer(HEX)");
	lcd_gotoxy(1,2);
	uint32_t countdown = 0;
	uint8_t n_digit = 0;
	for(int i = 0; i<9; i++)
 68e:	21 96       	adiw	r28, 0x01	; 1
 690:	c9 30       	cpi	r28, 0x09	; 9
 692:	d1 05       	cpc	r29, r1
 694:	0c f4       	brge	.+2      	; 0x698 <timer+0xdc>
 696:	ad cf       	rjmp	.-166    	; 0x5f2 <timer+0x36>
//***************  set timer ***************
	lcd_clear();
	lcd_print("Set timer(HEX)");
	lcd_gotoxy(1,2);
	uint32_t countdown = 0;
	uint8_t n_digit = 0;
 698:	10 e0       	ldi	r17, 0x00	; 0
		countdown = countdown<<(4*1);
		countdown += value;
	}
	
//***************  counting down ***************
	while(PINC & (1<<button_pin )){}//wait for button release
 69a:	30 99       	sbic	0x06, 0	; 6
 69c:	fe cf       	rjmp	.-4      	; 0x69a <timer+0xde>
 69e:	8f e5       	ldi	r24, 0x5F	; 95
 6a0:	9a ee       	ldi	r25, 0xEA	; 234
 6a2:	01 97       	sbiw	r24, 0x01	; 1
 6a4:	f1 f7       	brne	.-4      	; 0x6a2 <timer+0xe6>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <timer+0xec>
 6a8:	00 00       	nop
	_delay_ms(15);
	PCICR |= (1<<PCIE1);
 6aa:	e8 e6       	ldi	r30, 0x68	; 104
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	80 81       	ld	r24, Z
 6b0:	82 60       	ori	r24, 0x02	; 2
 6b2:	80 83       	st	Z, r24
	lcd_hideCursor();
 6b4:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_hideCursor>
	uint32_t countdown_backup = countdown;
	while(countdown > 0)
 6b8:	75 01       	movw	r14, r10
 6ba:	64 01       	movw	r12, r8
 6bc:	3a c0       	rjmp	.+116    	; 0x732 <timer+0x176>
	{	
		char c;
		lcd_clear();
 6be:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clear>
		lcd_gotoxy(1,1);
 6c2:	61 e0       	ldi	r22, 0x01	; 1
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_gotoxy>
		lcd_print("Timer(HEX)");
 6ca:	8a e6       	ldi	r24, 0x6A	; 106
 6cc:	91 e0       	ldi	r25, 0x01	; 1
 6ce:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
		lcd_gotoxy(1,2);
 6d2:	62 e0       	ldi	r22, 0x02	; 2
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_gotoxy>
		for(int i=n_digit;i>=0;i--) 
 6da:	c1 2f       	mov	r28, r17
 6dc:	d0 e0       	ldi	r29, 0x00	; 0
 6de:	17 c0       	rjmp	.+46     	; 0x70e <timer+0x152>
		{
			uint8_t hexDigit = (countdown >> (4 * i)) & 0xF; // Extract each hex digit using bitwise shift and mask
 6e0:	ce 01       	movw	r24, r28
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	a7 01       	movw	r20, r14
 6ec:	96 01       	movw	r18, r12
 6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <timer+0x13c>
 6f0:	56 95       	lsr	r21
 6f2:	47 95       	ror	r20
 6f4:	37 95       	ror	r19
 6f6:	27 95       	ror	r18
 6f8:	8a 95       	dec	r24
 6fa:	d2 f7       	brpl	.-12     	; 0x6f0 <timer+0x134>
 6fc:	da 01       	movw	r26, r20
 6fe:	c9 01       	movw	r24, r18
 700:	8f 70       	andi	r24, 0x0F	; 15
			c = hex_to_ASCII(hexDigit);
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 b0 02 	call	0x560	; 0x560 <hex_to_ASCII>
			lcdData(c); 
 708:	0e 94 32 01 	call	0x264	; 0x264 <lcdData>
		char c;
		lcd_clear();
		lcd_gotoxy(1,1);
		lcd_print("Timer(HEX)");
		lcd_gotoxy(1,2);
		for(int i=n_digit;i>=0;i--) 
 70c:	21 97       	sbiw	r28, 0x01	; 1
 70e:	dd 23       	and	r29, r29
 710:	3c f7       	brge	.-50     	; 0x6e0 <timer+0x124>
		{
			uint8_t hexDigit = (countdown >> (4 * i)) & 0xF; // Extract each hex digit using bitwise shift and mask
			c = hex_to_ASCII(hexDigit);
			lcdData(c); 
		}
		if(reset_button==1)
 712:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
 716:	81 30       	cpi	r24, 0x01	; 1
 718:	29 f4       	brne	.+10     	; 0x724 <timer+0x168>
		{	
			reset_button = 0;
 71a:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <__data_end>
			countdown = countdown_backup;
 71e:	75 01       	movw	r14, r10
 720:	64 01       	movw	r12, r8
			continue;
 722:	07 c0       	rjmp	.+14     	; 0x732 <timer+0x176>
		}
		counter_1sec();
 724:	0e 94 cf 02 	call	0x59e	; 0x59e <counter_1sec>
		countdown--;
 728:	31 e0       	ldi	r19, 0x01	; 1
 72a:	c3 1a       	sub	r12, r19
 72c:	d1 08       	sbc	r13, r1
 72e:	e1 08       	sbc	r14, r1
 730:	f1 08       	sbc	r15, r1
	while(PINC & (1<<button_pin )){}//wait for button release
	_delay_ms(15);
	PCICR |= (1<<PCIE1);
	lcd_hideCursor();
	uint32_t countdown_backup = countdown;
	while(countdown > 0)
 732:	c1 14       	cp	r12, r1
 734:	d1 04       	cpc	r13, r1
 736:	e1 04       	cpc	r14, r1
 738:	f1 04       	cpc	r15, r1
 73a:	09 f6       	brne	.-126    	; 0x6be <timer+0x102>
			continue;
		}
		counter_1sec();
		countdown--;
	}
	PCICR &= ~(1<<PCIE1);
 73c:	e8 e6       	ldi	r30, 0x68	; 104
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 81       	ld	r24, Z
 742:	8d 7f       	andi	r24, 0xFD	; 253
 744:	80 83       	st	Z, r24
	lcd_clear();
 746:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clear>
	lcd_gotoxy(4,1);
 74a:	61 e0       	ldi	r22, 0x01	; 1
 74c:	84 e0       	ldi	r24, 0x04	; 4
 74e:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_gotoxy>
	lcd_print("Time's up!");
 752:	85 e7       	ldi	r24, 0x75	; 117
 754:	91 e0       	ldi	r25, 0x01	; 1
 756:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
	lcd_gotoxy(1,2);
 75a:	62 e0       	ldi	r22, 0x02	; 2
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_gotoxy>
	lcd_print("button=>restart");
 762:	80 e8       	ldi	r24, 0x80	; 128
 764:	91 e0       	ldi	r25, 0x01	; 1
 766:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_print>
	PORTC |= (1<<LED_pin);
 76a:	88 b1       	in	r24, 0x08	; 8
 76c:	84 60       	ori	r24, 0x04	; 4
 76e:	88 b9       	out	0x08, r24	; 8
	while((PINC & (1<<button_pin )) == 0){}
 770:	30 9b       	sbis	0x06, 0	; 6
 772:	fe cf       	rjmp	.-4      	; 0x770 <timer+0x1b4>
 774:	8f e5       	ldi	r24, 0x5F	; 95
 776:	9a ee       	ldi	r25, 0xEA	; 234
 778:	01 97       	sbiw	r24, 0x01	; 1
 77a:	f1 f7       	brne	.-4      	; 0x778 <timer+0x1bc>
 77c:	00 c0       	rjmp	.+0      	; 0x77e <timer+0x1c2>
 77e:	00 00       	nop
	_delay_ms(15);
	while(PINC & (1<<button_pin)){}
 780:	30 99       	sbic	0x06, 0	; 6
 782:	fe cf       	rjmp	.-4      	; 0x780 <timer+0x1c4>
	PORTC &= ~(1<<LED_pin);
 784:	88 b1       	in	r24, 0x08	; 8
 786:	8b 7f       	andi	r24, 0xFB	; 251
 788:	88 b9       	out	0x08, r24	; 8
	lcd_showCursor();
 78a:	0e 94 42 01 	call	0x284	; 0x284 <lcd_showCursor>
}
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	1f 91       	pop	r17
 794:	ff 90       	pop	r15
 796:	ef 90       	pop	r14
 798:	df 90       	pop	r13
 79a:	cf 90       	pop	r12
 79c:	bf 90       	pop	r11
 79e:	af 90       	pop	r10
 7a0:	9f 90       	pop	r9
 7a2:	8f 90       	pop	r8
 7a4:	08 95       	ret

000007a6 <main>:
void timer(void);
void authenticate(void);

int main(void)
{	
	setup();
 7a6:	0e 94 b3 01 	call	0x366	; 0x366 <setup>
	authenticate();
 7aa:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <authenticate>
	timer();
 7ae:	0e 94 de 02 	call	0x5bc	; 0x5bc <timer>
	while(1)
	{	
		if(PINC & (1<<switch_pin))
 7b2:	31 99       	sbic	0x06, 1	; 6
			authenticate();
 7b4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <authenticate>
		timer();
 7b8:	0e 94 de 02 	call	0x5bc	; 0x5bc <timer>
	}
 7bc:	fa cf       	rjmp	.-12     	; 0x7b2 <main+0xc>

000007be <__vector_4>:
			break;
	}
}

ISR (PCINT1_vect)
{	
 7be:	1f 92       	push	r1
 7c0:	0f 92       	push	r0
 7c2:	0f b6       	in	r0, 0x3f	; 63
 7c4:	0f 92       	push	r0
 7c6:	11 24       	eor	r1, r1
 7c8:	8f 93       	push	r24
 7ca:	9f 93       	push	r25
 7cc:	8f e5       	ldi	r24, 0x5F	; 95
 7ce:	9a ee       	ldi	r25, 0xEA	; 234
 7d0:	01 97       	sbiw	r24, 0x01	; 1
 7d2:	f1 f7       	brne	.-4      	; 0x7d0 <__vector_4+0x12>
 7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <__vector_4+0x18>
 7d6:	00 00       	nop
	_delay_ms(15);
	if ((PINC & (1 << button_pin)))
 7d8:	30 9b       	sbis	0x06, 0	; 6
 7da:	03 c0       	rjmp	.+6      	; 0x7e2 <__vector_4+0x24>
	{	
		reset_button = 1;
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__data_end>
	}
	PCIFR |= (1 << PCIF1);
 7e2:	8b b3       	in	r24, 0x1b	; 27
 7e4:	82 60       	ori	r24, 0x02	; 2
 7e6:	8b bb       	out	0x1b, r24	; 27
 7e8:	9f 91       	pop	r25
 7ea:	8f 91       	pop	r24
 7ec:	0f 90       	pop	r0
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	0f 90       	pop	r0
 7f2:	1f 90       	pop	r1
 7f4:	18 95       	reti

000007f6 <strcmp>:
 7f6:	fb 01       	movw	r30, r22
 7f8:	dc 01       	movw	r26, r24
 7fa:	8d 91       	ld	r24, X+
 7fc:	01 90       	ld	r0, Z+
 7fe:	80 19       	sub	r24, r0
 800:	01 10       	cpse	r0, r1
 802:	d9 f3       	breq	.-10     	; 0x7fa <strcmp+0x4>
 804:	99 0b       	sbc	r25, r25
 806:	08 95       	ret

00000808 <_exit>:
 808:	f8 94       	cli

0000080a <__stop_program>:
 80a:	ff cf       	rjmp	.-2      	; 0x80a <__stop_program>
