
LAB8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000914  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000787  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ad  00000000  00000000  00001363  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001710  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000422  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000143  00000000  00000000  00001be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001d25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_Init>:

unsigned char USART_Receive(void){
	//Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
}
  80:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  8e:	8e e0       	ldi	r24, 0x0E	; 14
  90:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  94:	08 95       	ret

00000096 <USART_Transmit>:


void USART_Transmit(unsigned char data){
	//Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
  96:	e0 ec       	ldi	r30, 0xC0	; 192
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	90 81       	ld	r25, Z
  9c:	95 ff       	sbrs	r25, 5
  9e:	fd cf       	rjmp	.-6      	; 0x9a <USART_Transmit+0x4>
	//Put data into buffer, sends the data
	UDR0 = data;
  a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  a4:	08 95       	ret

000000a6 <USART_Print>:
}

void USART_Print(const char* data)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
	while(*data)
  ac:	88 81       	ld	r24, Y
  ae:	88 23       	and	r24, r24
  b0:	31 f0       	breq	.+12     	; 0xbe <USART_Print+0x18>
  b2:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*data++);	
  b4:	0e 94 4b 00 	call	0x96	; 0x96 <USART_Transmit>
	UDR0 = data;
}

void USART_Print(const char* data)
{
	while(*data)
  b8:	89 91       	ld	r24, Y+
  ba:	81 11       	cpse	r24, r1
  bc:	fb cf       	rjmp	.-10     	; 0xb4 <USART_Print+0xe>
		USART_Transmit(*data++);	
}
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <ADC_Init>:

// Initialize ADC
void ADC_Init()
{
	// Set reference voltage to AVCC and left-adjust result (8-bit)
	ADMUX = (1 << MUX0);
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// Enable ADC, enable ADC interrupt, and start conversion
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);
  ca:	86 e8       	ldi	r24, 0x86	; 134
  cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d0:	08 95       	ret

000000d2 <ADC_Read>:

// Start ADC conversion
uint16_t ADC_Read(uint8_t channel)
{
	// Select the channel
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
  d2:	ec e7       	ldi	r30, 0x7C	; 124
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	90 7f       	andi	r25, 0xF0	; 240
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	89 2b       	or	r24, r25
  de:	80 83       	st	Z, r24
	
	// Start the conversion
	ADCSRA |= (1 << ADSC);
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	80 83       	st	Z, r24
	
	// Wait for the conversion to complete
	while (ADCSRA & (1 << ADSC));
  ea:	80 81       	ld	r24, Z
  ec:	86 fd       	sbrc	r24, 6
  ee:	fd cf       	rjmp	.-6      	; 0xea <ADC_Read+0x18>
	
	// Return the 10-bit result from ADCL and ADCH
	return ADC;
  f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  f8:	08 95       	ret

000000fa <int_to_ascii>:

// Convert integer to ASCII string (manual implementation of itoa for 8-bit values)
void int_to_ascii(uint8_t num, char* buffer)
{
  fa:	fb 01       	movw	r30, r22
	buffer[0] = (num / 100) + '0'; // Hundreds
  fc:	99 e2       	ldi	r25, 0x29	; 41
  fe:	89 9f       	mul	r24, r25
 100:	91 2d       	mov	r25, r1
 102:	11 24       	eor	r1, r1
 104:	92 95       	swap	r25
 106:	9f 70       	andi	r25, 0x0F	; 15
 108:	90 5d       	subi	r25, 0xD0	; 208
 10a:	90 83       	st	Z, r25
	buffer[1] = ((num / 10) % 10) + '0'; // Tens
 10c:	9d ec       	ldi	r25, 0xCD	; 205
 10e:	89 9f       	mul	r24, r25
 110:	21 2d       	mov	r18, r1
 112:	11 24       	eor	r1, r1
 114:	26 95       	lsr	r18
 116:	26 95       	lsr	r18
 118:	26 95       	lsr	r18
 11a:	29 9f       	mul	r18, r25
 11c:	91 2d       	mov	r25, r1
 11e:	11 24       	eor	r1, r1
 120:	96 95       	lsr	r25
 122:	96 95       	lsr	r25
 124:	96 95       	lsr	r25
 126:	99 0f       	add	r25, r25
 128:	39 2f       	mov	r19, r25
 12a:	33 0f       	add	r19, r19
 12c:	33 0f       	add	r19, r19
 12e:	93 0f       	add	r25, r19
 130:	32 2f       	mov	r19, r18
 132:	39 1b       	sub	r19, r25
 134:	93 2f       	mov	r25, r19
 136:	90 5d       	subi	r25, 0xD0	; 208
 138:	91 83       	std	Z+1, r25	; 0x01
	buffer[2] = (num % 10) + '0'; // Ones
 13a:	22 0f       	add	r18, r18
 13c:	92 2f       	mov	r25, r18
 13e:	99 0f       	add	r25, r25
 140:	99 0f       	add	r25, r25
 142:	29 0f       	add	r18, r25
 144:	82 1b       	sub	r24, r18
 146:	80 5d       	subi	r24, 0xD0	; 208
 148:	82 83       	std	Z+2, r24	; 0x02
	buffer[3] = '\0'; // Null-terminate the string
 14a:	13 82       	std	Z+3, r1	; 0x03
 14c:	08 95       	ret

0000014e <main>:
}

// Main program
int main(void)
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	00 d0       	rcall	.+0      	; 0x154 <main+0x6>
 154:	00 d0       	rcall	.+0      	; 0x156 <main+0x8>
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
	// Initialize USART and ADC
	USART_Init(MYUBRR);
 15a:	87 e6       	ldi	r24, 0x67	; 103
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 40 00 	call	0x80	; 0x80 <USART_Init>
	ADC_Init();
 162:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_Init>
	char buffer[4]; // For storing ASCII representation of ADC value
	
	while (1)
	{
		// Read the potentiometer value (10-bit)
		adc_value = ADC_Read(POT_PIN);
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 69 00 	call	0xd2	; 0xd2 <ADC_Read>
		
		// Scale the 10-bit ADC value to 8-bit using right-shift (divide by 4)
		scaled_value = adc_value >> 2;
		
		// Convert scaled value (8-bit) to ASCII
		int_to_ascii(scaled_value, buffer);
 16c:	96 95       	lsr	r25
 16e:	87 95       	ror	r24
 170:	96 95       	lsr	r25
 172:	87 95       	ror	r24
 174:	be 01       	movw	r22, r28
 176:	6f 5f       	subi	r22, 0xFF	; 255
 178:	7f 4f       	sbci	r23, 0xFF	; 255
 17a:	0e 94 7d 00 	call	0xfa	; 0xfa <int_to_ascii>
		
		// Send the scaled ADC value via USART (send each character)
		USART_Print(buffer); // Uses your USART_Print function to send string
 17e:	ce 01       	movw	r24, r28
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Print>
		
		// Send a newline for better readability in the terminal
		USART_Transmit('\r');
 186:	8d e0       	ldi	r24, 0x0D	; 13
 188:	0e 94 4b 00 	call	0x96	; 0x96 <USART_Transmit>
		USART_Transmit('\n');
 18c:	8a e0       	ldi	r24, 0x0A	; 10
 18e:	0e 94 4b 00 	call	0x96	; 0x96 <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	81 ee       	ldi	r24, 0xE1	; 225
 196:	94 e0       	ldi	r25, 0x04	; 4
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x4a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x54>
 1a2:	00 00       	nop
 1a4:	e0 cf       	rjmp	.-64     	; 0x166 <main+0x18>

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
