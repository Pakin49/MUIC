
Lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ed  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000754  00000000  00000000  00000b89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000350  00000000  00000000  000012dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c0  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001da  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001ca6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include "stack.h"
uint8_t status = 0; // 0 OFF 1 ON
uint8_t POP = 0;
int main()
{
	DDRD = ~(1<<DDD3);
  90:	87 ef       	ldi	r24, 0xF7	; 247
  92:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD6);
  94:	56 9a       	sbi	0x0a, 6	; 10
	EIMSK = (1<<INT1);
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	8d bb       	out	0x1d, r24	; 29
	EICRA = (1<<ISC11)|(1<<ISC10); // detect rising edge initially LED turn OFF;
  9a:	8c e0       	ldi	r24, 0x0C	; 12
  9c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	
	//Timer/Counter Compare match A for 3 seconds delays
	TCCR1A = 0; // nothing
  a0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12)|(1<<CS12)|(1<<CS10); //CTC MODE and PRESCALE 1024
  a4:	8d e0       	ldi	r24, 0x0D	; 13
  a6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 46874; // set output compare register 1A = 3SEC 46875-1
  aa:	8a e1       	ldi	r24, 0x1A	; 26
  ac:	97 eb       	ldi	r25, 0xB7	; 183
  ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	Stack time;
	initialize(&time);
	sei ();
  b6:	78 94       	sei
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0x28>

000000ba <__vector_2>:
	while(1){ }
	return 0;
}

ISR(INT1_vect)
{	
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	if(status == 0)
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ce:	81 11       	cpse	r24, r1
  d0:	0c c0       	rjmp	.+24     	; 0xea <__vector_2+0x30>
	{
		// SET INTERUPT TO DETECT FALLING EDGE
		EICRA |= (1<<ISC11);
  d2:	e9 e6       	ldi	r30, 0x69	; 105
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	80 83       	st	Z, r24
		EICRA &= ~(1<<ISC10);
  dc:	80 81       	ld	r24, Z
  de:	8b 7f       	andi	r24, 0xFB	; 251
  e0:	80 83       	st	Z, r24
		status = 1;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	07 c0       	rjmp	.+14     	; 0xf8 <__vector_2+0x3e>
	}
	else
	{
		EICRA |= (1<<ISC11)|(1<<ISC10); // set interrupt to detect rising edge
  ea:	e9 e6       	ldi	r30, 0x69	; 105
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	8c 60       	ori	r24, 0x0C	; 12
  f2:	80 83       	st	Z, r24
		status = 0;
  f4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	TCNT1 = 0;
  f8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  fc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIMSK1 |=  (1<<OCIE1A); // turn on the timer;
 100:	ef e6       	ldi	r30, 0x6F	; 111
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	82 60       	ori	r24, 0x02	; 2
 108:	80 83       	st	Z, r24
}
 10a:	ff 91       	pop	r31
 10c:	ef 91       	pop	r30
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
	if(status == 1)
 12a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	19 f4       	brne	.+6      	; 0x138 <__vector_11+0x1e>
		PORTD = (1<<PORTD6); // TURN ON LED
 132:	80 e4       	ldi	r24, 0x40	; 64
 134:	8b b9       	out	0x0b, r24	; 11
 136:	01 c0       	rjmp	.+2      	; 0x13a <__vector_11+0x20>
	else
		PORTD &= ~(1<<PORTD6);//turn off LED
 138:	5e 98       	cbi	0x0b, 6	; 11
	TIMSK1 &= ~(1<<OCIE1A); // write 1 to clear timer interrupt flag for output compare register 1A
 13a:	ef e6       	ldi	r30, 0x6F	; 111
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	8d 7f       	andi	r24, 0xFD	; 253
 142:	80 83       	st	Z, r24
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
