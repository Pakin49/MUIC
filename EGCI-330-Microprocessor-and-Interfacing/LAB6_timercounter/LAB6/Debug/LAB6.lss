
LAB6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c5  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000635  00000000  00000000  0000087d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025b  00000000  00000000  00000eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000338  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008e  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000150a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay>:
#include <avr/io.h>
#define F_CPU 16000000UL

void delay()
{
	TCCR0A = (1<<WGM01);
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS02)|(1<<CS00);
  84:	85 e0       	ldi	r24, 0x05	; 5
  86:	85 bd       	out	0x25, r24	; 37
	OCR0A = 155;
  88:	8b e9       	ldi	r24, 0x9B	; 155
  8a:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0;
  8c:	16 bc       	out	0x26, r1	; 38
	while((TIFR0&(1<<OCF0A))==0){}
  8e:	a9 9b       	sbis	0x15, 1	; 21
  90:	fe cf       	rjmp	.-4      	; 0x8e <delay+0xe>
	TIFR0 |= (1<<OCF1A);
  92:	a9 9a       	sbi	0x15, 1	; 21
  94:	08 95       	ret

00000096 <main>:
int main()
{	
	uint8_t CS = 0;
	uint8_t PS = 1;
	uint8_t count = 0;
	DDRD &= ~(1<<DDB4);
  96:	54 98       	cbi	0x0a, 4	; 10
	DDRB |= (1<<DDB2);
  98:	22 9a       	sbi	0x04, 2	; 4

int main()
{	
	uint8_t CS = 0;
	uint8_t PS = 1;
	uint8_t count = 0;
  9a:	d0 e0       	ldi	r29, 0x00	; 0
	TIFR0 |= (1<<OCF1A);
}

int main()
{	
	uint8_t CS = 0;
  9c:	90 e0       	ldi	r25, 0x00	; 0
			count++;
		delay();
		if(count == 10)
		{
			count = 0;
			PORTB ^= (1<<PORTB2);
  9e:	14 e0       	ldi	r17, 0x04	; 4
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <main+0xe>
  a2:	9c 2f       	mov	r25, r28
	DDRD &= ~(1<<DDB4);
	DDRB |= (1<<DDB2);
	while(1)
	{	
		PS = CS;
		CS = PIND& (1<<PIND4);
  a4:	89 b1       	in	r24, 0x09	; 9
		if(CS && !PS)
  a6:	c8 2f       	mov	r28, r24
  a8:	c0 71       	andi	r28, 0x10	; 16
  aa:	84 ff       	sbrs	r24, 4
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <main+0x1e>
  ae:	91 11       	cpse	r25, r1
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <main+0x1e>
			count++;
  b2:	df 5f       	subi	r29, 0xFF	; 255
		delay();
  b4:	0e 94 40 00 	call	0x80	; 0x80 <delay>
		if(count == 10)
  b8:	da 30       	cpi	r29, 0x0A	; 10
  ba:	99 f7       	brne	.-26     	; 0xa2 <main+0xc>
		{
			count = 0;
			PORTB ^= (1<<PORTB2);
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	81 27       	eor	r24, r17
  c0:	85 b9       	out	0x05, r24	; 5
		if(CS && !PS)
			count++;
		delay();
		if(count == 10)
		{
			count = 0;
  c2:	d0 e0       	ldi	r29, 0x00	; 0
  c4:	ee cf       	rjmp	.-36     	; 0xa2 <main+0xc>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
