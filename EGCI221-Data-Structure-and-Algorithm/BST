{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMnn6vefZarMaHT16MXGPJj"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["class tree:\n","  def __init__(self):\n","    tree.root = None\n","    tree.size = 0\n","\n","class node:\n","  def __init__(self,key,right=None,left=None,parent=None):\n","    self.key = key\n","    self.right = right\n","    self.left = left\n","    self.parent = parent\n","\n","  def getKey(self):\n","    return self.key\n","\n","def preorder(node):\n","  if node is not None:\n","    print(node.key)\n","    preorder(node.left)\n","    preorder(node.right)\n","\n","def insert(tree,z):\n","  y = None ;  x=tree.root\n","  while x != None:\n","    y = x\n","    if (z.key<x.key):\n","      x = x.left\n","    else:\n","      x = x.right\n","  z.parent = y\n","  if y == None:\n","    tree.root = z\n","  elif (z.key < y.key):\n","    y.left = z\n","  else:\n","    y.right = z\n"],"metadata":{"id":"eMQxrf908qZ4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["generate_tree(n)"],"metadata":{"id":"a81NdFfvlrro"},"execution_count":null,"outputs":[]}]}